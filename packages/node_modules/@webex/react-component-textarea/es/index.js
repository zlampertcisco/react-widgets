import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-textarea__textarea__LnRleHRh {\n  display: block;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  font-family: CiscoSans, 'Helvetica Neue', Arial, sans-serif;\n  font-size: 14px;\n  font-weight: 200;\n  background: transparent;\n  border: none;\n  outline: none;\n  box-sizing: border-box;\n  resize: none;\n}\n";
var styles = {"textarea":"react-component-textarea__textarea__LnRleHRh"};
styleInject(css_248z);

const propTypes = {
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onKeyDown: PropTypes.func,
  onSubmit: PropTypes.func,
  placeholder: PropTypes.string,
  rows: PropTypes.number,
  textAreaClassName: PropTypes.string,
  value: PropTypes.string
};
const defaultProps = {
  onBlur: () => {},
  onChange: undefined,
  onFocus: () => {},
  onKeyDown: PropTypes.func,
  onSubmit: () => {},
  placeholder: '',
  rows: 1,
  textAreaClassName: '',
  value: ''
};

function TextArea({
  textAreaClassName,
  onBlur,
  onChange,
  onFocus,
  onKeyDown,
  onSubmit,
  placeholder,
  rows,
  value
}) {
  const textAreaProps = {
    className: classNames('webex-textarea', styles.textarea, textAreaClassName),
    onBlur,
    onChange,
    onFocus,
    onKeyDown,
    onSubmit,
    placeholder,
    rows
  }; // Only set text area value if onChange method exists, otherwise use existing value

  if (onChange && value !== undefined) {
    textAreaProps.value = value;
  }

  return /*#__PURE__*/React.createElement("textarea", textAreaProps);
}

TextArea.propTypes = propTypes;
TextArea.defaultProps = defaultProps;

export default TextArea;
//# sourceMappingURL=index.js.map
