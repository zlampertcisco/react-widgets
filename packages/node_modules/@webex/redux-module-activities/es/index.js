import { Record, Map } from 'immutable';

function constructActivity(activity) {
  return {
    id: activity.id,
    actor: activity.actor ? activity.actor.id : undefined,
    type: activity.verb,
    objectType: activity.objectType,
    published: activity.published,
    object: activity.object,
    url: activity.url
  };
}
function constructActivities(activities) {
  return activities.map(constructActivity);
}

const STORE_ACTIVITIES = 'activities/STORE_ACTIVITIES';
const UPDATE_ACTIVITY = 'activities/UPDATE_ACTIVITY';
const DELETE_ACTIVITY = 'activities/DELETE_ACTIVITY';
function storeActivities(activities) {
  return {
    type: STORE_ACTIVITIES,
    payload: {
      activities: constructActivities(activities)
    }
  };
}
function updateActivity(activity) {
  return {
    type: UPDATE_ACTIVITY,
    payload: {
      activity: constructActivity(activity)
    }
  };
}
/**
 * "Delete" an activity == tombstoning the activity
 *
 * @export
 * @param {Object} activity
 * @returns {Object} redux action
 */

function deleteActivity(activity) {
  const tombstoneActivity = Object.assign({}, activity, {
    verb: 'tombstone'
  });
  return {
    type: DELETE_ACTIVITY,
    payload: {
      activitiy: constructActivity(tombstoneActivity)
    }
  };
}

const Activity = Record({
  id: null,
  actor: null,
  type: '',
  object: {}
});
const initialState = Map({
  byId: Map()
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_ACTIVITIES:
      {
        const activities = {};
        action.payload.activities.forEach(a => {
          activities[a.id] = new Activity(a);
        });
        return state.mergeIn(['byId'], activities);
      }

    case UPDATE_ACTIVITY:
      {
        const {
          activity
        } = action.payload;
        return state.mergeDeepIn(['byId', activity.id], activity);
      }

    case DELETE_ACTIVITY:
      {
        const {
          activity
        } = action.payload;
        return state.setIn(['byId', activity.id], activity);
      }

    default:
      return state;
  }
}

export default reducer;
export { DELETE_ACTIVITY, STORE_ACTIVITIES, UPDATE_ACTIVITY, deleteActivity, initialState, storeActivities, updateActivity };
//# sourceMappingURL=index.js.map
