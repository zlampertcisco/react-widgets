import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { CallControl, ActivityButton } from '@momentum-ui/react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-button-controls__controlContainer__LmNvbnRy {\n  display: flex;\n  width: 100%;\n  padding: 0 20px;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  box-sizing: border-box;\n}\n\n.react-component-button-controls__controlItem__LmNvbnRy {\n  padding: 0 0;\n  flex: 0 1 auto;\n}\n\n.react-component-button-controls__button__LmNvbnRy {\n  width: 56px;\n  height: 56px;\n  font-size: 24px;\n  line-height: 0.5;\n  color: #fff;\n  border-radius: 50%;\n}\n";
var styles = {"controlContainer":"react-component-button-controls__controlContainer__LmNvbnRy","controlItem":"react-component-button-controls__controlItem__LmNvbnRy","button":"react-component-button-controls__button__LmNvbnRy"};
styleInject(css_248z);

const propTypes = {
  buttons: PropTypes.arrayOf(PropTypes.shape({
    accessibilityLabel: PropTypes.string,
    label: PropTypes.string,
    buttonClassName: PropTypes.string,
    buttonType: PropTypes.oneOfType([PropTypes.oneOf(['chat', 'camera', 'meetings', 'whiteboard', 'files', 'share-screen', 'tasks', 'microphone-muted', 'camera-muted', 'cancel']), PropTypes.shape({
      color: PropTypes.string,
      icon: PropTypes.element.isRequired
    })]),
    callControl: PropTypes.bool,
    onClick: PropTypes.func
  })).isRequired,
  showLabels: PropTypes.bool
};
const defaultProps = {
  showLabels: false
};

function ButtonControls(props) {
  const {
    buttons,
    showLabels
  } = props;
  const buttonsRendered = buttons.map((button, idx) => {
    const label = showLabels && button.label ? button.label : '';
    const ariaLabel = button.accessibilityLabel || button.label;
    const key = button.key || `button-controls-${idx}`;

    if (button.callControl) {
      return /*#__PURE__*/React.createElement(CallControl, {
        active: button.active,
        ariaLabel: ariaLabel,
        key: key,
        label: label,
        onClick: button.onClick,
        type: button.buttonType
      });
    }

    return /*#__PURE__*/React.createElement(ActivityButton, {
      active: button.active,
      ariaLabel: ariaLabel,
      key: key,
      label: label,
      onClick: button.onClick,
      type: button.buttonType
    });
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-controls-container', styles.controlContainer)
  }, buttonsRendered);
}

ButtonControls.propTypes = propTypes;
ButtonControls.defaultProps = defaultProps;

export default ButtonControls;
//# sourceMappingURL=index.js.map
