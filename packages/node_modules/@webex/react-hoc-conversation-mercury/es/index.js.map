{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {API_ACTIVITY_TYPE, API_ACTIVITY_VERB, getDisplayName} from '@webex/react-component-utils';\nimport {\n  addParticipant,\n  receiveMercuryActivity,\n  receiveMercuryComment,\n  removeParticipant,\n  updateConversationState\n} from '@webex/redux-module-conversation';\n\nconst IS_LISTENING = 'isListeningToMercury';\n\nexport default function wrapConversationMercury(WrappedComponent) {\n  const injectedPropTypes = {\n    addParticipant: PropTypes.func.isRequired,\n    conversation: PropTypes.object.isRequired,\n    mercury: PropTypes.object.isRequired,\n    receiveMercuryActivity: PropTypes.func.isRequired,\n    receiveMercuryComment: PropTypes.func.isRequired,\n    removeParticipant: PropTypes.func.isRequired,\n    spark: PropTypes.object.isRequired,\n    updateConversationState: PropTypes.func.isRequired\n  };\n\n  class ConversationMercuryComponent extends Component {\n    componentDidMount() {\n      this.listenToMercury(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.listenToMercury(nextProps);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      return nextProps !== this.props;\n    }\n\n    listenToMercury(props) {\n      const {mercury, conversation, spark} = props;\n      const mecuryConnected = mercury.getIn(['status', 'connected']);\n      const conversationId = conversation.get('id');\n      const isListening = conversation.getIn(['status', IS_LISTENING]);\n\n      if (mecuryConnected && conversationId && !isListening) {\n        this.listenToNewActivity(conversationId, spark);\n        const conversationState = {};\n\n        conversationState[IS_LISTENING] = true;\n        this.props.updateConversationState(conversationState);\n      }\n    }\n\n    /**\n     * Setup listeners for new activities\n     *\n     * @param {String} conversationId\n     * @param {Object} sparkInstance\n     * @returns {undefined}\n     */\n    listenToNewActivity(conversationId, sparkInstance) {\n      sparkInstance.internal.mercury.on('event:conversation.activity', (event) => {\n        const activity = Object.assign({alertType: event.alertType}, event.data.activity);\n\n        // Reply activities are not currently supported\n        if (activity.type === API_ACTIVITY_TYPE.REPLY) {\n          return;\n        }\n\n        // Ignore activity from other conversations\n        if (activity.target && activity.target.id === conversationId) {\n          if (activity.object.objectType === 'activity') {\n            this.props.receiveMercuryActivity(activity);\n          }\n          else if (activity.object.objectType === 'person') {\n            if (activity.verb === API_ACTIVITY_VERB.ADD) {\n              this.props.addParticipant(activity.object);\n            }\n            else if (activity.verb === API_ACTIVITY_VERB.LEAVE) {\n              this.props.removeParticipant(activity.object);\n            }\n            this.props.receiveMercuryComment(activity);\n          }\n          else {\n            this.props.receiveMercuryComment(activity);\n          }\n        }\n      });\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  ConversationMercuryComponent.displayName = `ConversationMercuryComponent(${getDisplayName(WrappedComponent)})`;\n  ConversationMercuryComponent.WrappedComponent = WrappedComponent;\n\n  ConversationMercuryComponent.propTypes = injectedPropTypes;\n\n  return connect(\n    (state) => ({\n      conversation: state.conversation,\n      mercury: state.mercury,\n      spark: state.spark.get('spark')\n    }),\n    (dispatch) => bindActionCreators({\n      addParticipant,\n      receiveMercuryActivity,\n      receiveMercuryComment,\n      removeParticipant,\n      updateConversationState\n    }, dispatch)\n  )(ConversationMercuryComponent);\n}\n"],"names":["IS_LISTENING","wrapConversationMercury","WrappedComponent","injectedPropTypes","addParticipant","PropTypes","func","isRequired","conversation","object","mercury","receiveMercuryActivity","receiveMercuryComment","removeParticipant","spark","updateConversationState","ConversationMercuryComponent","Component","componentDidMount","listenToMercury","props","componentWillReceiveProps","nextProps","shouldComponentUpdate","mecuryConnected","getIn","conversationId","get","isListening","listenToNewActivity","conversationState","sparkInstance","internal","on","event","activity","Object","assign","alertType","data","type","API_ACTIVITY_TYPE","REPLY","target","id","objectType","verb","API_ACTIVITY_VERB","ADD","LEAVE","render","displayName","getDisplayName","propTypes","connect","state","dispatch","bindActionCreators"],"mappings":"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"}