import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { defineMessages, FormattedMessage } from 'react-intl';
import CallDataActivityMessage from '@webex/react-component-call-data-activity';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/*
 * System Message
 *
 * This contains all the text for the ActivitySystemMessage component.
 */
var messages = defineMessages({
  youCreate: {
    id: 'ciscospark.systemMessage.conversation.youCreate',
    defaultMessage: 'You created this conversation.'
  },
  someoneCreate: {
    id: 'ciscospark.systemMessage.conversation.someoneCreate',
    defaultMessage: '{name} created this conversation.'
  },
  youDelete: {
    id: 'ciscospark.systemMessage.message.youDelete',
    defaultMessage: 'You deleted your message.'
  },
  someoneDelete: {
    id: 'ciscospark.systemMessage.message.someoneDelete',
    defaultMessage: '{name} deleted their own message.'
  },
  youAdded: {
    id: 'ciscospark.systemMessage.message.youAdded',
    defaultMessage: 'You added {name} to this space.'
  },
  someoneAdded: {
    id: 'ciscospark.systemMessage.message.youAdded',
    defaultMessage: '{name} was added to this space.'
  },
  youRemoved: {
    id: 'ciscospark.systemMessage.message.youRemoved',
    defaultMessage: 'You removed {name} from this space.'
  },
  someoneRemoved: {
    id: 'ciscospark.systemMessage.message.youRemoved',
    defaultMessage: '{name} was removed from this space.'
  }
});

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-activity-system-message__systemMessage__LnN5c3Rl {\n  width: 100%;\n  padding-top: 10px;\n  font-size: 11px;\n  color: #aeaeaf;\n  text-align: center;\n}\n";
var styles = {"systemMessage":"react-component-activity-system-message__systemMessage__LnN5c3Rl"};
styleInject(css_248z);

// TODO: Migrate message verbs into a top level helper package

const SYSTEM_MESSAGE_VERB_TOMBSTONE = 'tombstone';
const SYSTEM_MESSAGE_VERB_CREATE = 'create';
const SYSTEM_MESSAGE_VERB_UPDATE = 'update';
const SYSTEM_MESSAGE_VERB_ADD = 'add';
const SYSTEM_MESSAGE_VERB_LEAVE = 'leave';
const SYSTEM_MESSAGE_VERBS = [SYSTEM_MESSAGE_VERB_CREATE, SYSTEM_MESSAGE_VERB_TOMBSTONE, SYSTEM_MESSAGE_VERB_UPDATE, SYSTEM_MESSAGE_VERB_ADD, SYSTEM_MESSAGE_VERB_LEAVE];
const propTypes = {
  activity: PropTypes.shape({
    duration: PropTypes.number,
    isGroupCall: PropTypes.bool,
    participants: PropTypes.shape({
      items: PropTypes.arrayOf(PropTypes.shape({
        isInitiator: PropTypes.bool,
        person: PropTypes.shape({
          entryUUID: PropTypes.string
        }),
        state: PropTypes.string
      }))
    })
  }),
  actor: PropTypes.shape({
    entryUUID: PropTypes.string
  }),
  currentUser: PropTypes.shape({
    id: PropTypes.string
  }),
  isSelf: PropTypes.bool,
  name: PropTypes.string.isRequired,
  timestamp: PropTypes.string,
  verb: PropTypes.string.isRequired
};
const defaultProps = {
  activity: {
    duration: null,
    isGroupCall: false,
    participants: {
      items: []
    }
  },
  actor: {},
  currentUser: {},
  isSelf: false,
  timestamp: ''
};

function ActivitySystemMessage(props) {
  const {
    activity,
    actor,
    currentUser,
    isSelf,
    name,
    timestamp,
    verb
  } = props;
  let systemMessage;

  switch (verb) {
    case SYSTEM_MESSAGE_VERB_ADD:
      {
        if (isSelf) {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.youAdded, {
            values: {
              name
            }
          }));
        } else {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.someoneAdded, {
            values: {
              name
            }
          }));
        }

        break;
      }

    case SYSTEM_MESSAGE_VERB_CREATE:
      {
        if (isSelf) {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, messages.youCreate);
        } else {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.someoneCreate, {
            values: {
              name
            }
          }));
        }

        break;
      }

    case SYSTEM_MESSAGE_VERB_LEAVE:
      {
        if (isSelf) {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.youRemoved, {
            values: {
              name
            }
          }));
        } else {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.someoneRemoved, {
            values: {
              name
            }
          }));
        }

        break;
      }

    case SYSTEM_MESSAGE_VERB_TOMBSTONE:
      {
        if (isSelf) {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, messages.youDelete);
        } else {
          systemMessage = /*#__PURE__*/React.createElement(FormattedMessage, _extends({}, messages.someoneDelete, {
            values: {
              name
            }
          }));
        }

        break;
      }

    case SYSTEM_MESSAGE_VERB_UPDATE:
      {
        systemMessage = /*#__PURE__*/React.createElement(CallDataActivityMessage, {
          actor: actor,
          currentUser: currentUser,
          duration: activity.duration,
          isGroupCall: activity.isGroupCall,
          participants: activity.participants.items
        });
        break;
      }

    default:
      return null;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-system-message', styles.systemMessage)
  }, systemMessage, " ", timestamp);
}

ActivitySystemMessage.propTypes = propTypes;
ActivitySystemMessage.defaultProps = defaultProps;

export default ActivitySystemMessage;
export { SYSTEM_MESSAGE_VERBS, SYSTEM_MESSAGE_VERB_ADD, SYSTEM_MESSAGE_VERB_CREATE, SYSTEM_MESSAGE_VERB_LEAVE, SYSTEM_MESSAGE_VERB_TOMBSTONE, SYSTEM_MESSAGE_VERB_UPDATE };
//# sourceMappingURL=index.js.map
