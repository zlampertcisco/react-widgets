import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import ActivityItem from '@webex/react-component-activity-item';
import DaySeparator from '@webex/react-component-day-separator';
import NewMessagesSeparator from '@webex/react-component-new-messages-separator';
import { getAdaptiveCardFeatureState, formatDate } from '@webex/react-component-utils';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-activity-list__separator__LnNlcGFy {\n  margin-right: 32px;\n  margin-left: 64px;\n}\n\n.react-component-activity-list__activityList__LnNlcGFy {\n  padding-bottom: 20px;\n}\n";
var styles = {"separator":"react-component-activity-list__separator__LnNlcGFy","activityList":"react-component-activity-list__activityList__LnNlcGFy"};
styleInject(css_248z);

const ITEM_TYPE_ACTIVITY = 'ITEM_TYPE_ACTIVITY';
const ITEM_TYPE_DAY_SEPARATOR = 'ITEM_TYPE_DAY_SEPARATOR';
const ITEM_TYPE_NEW_MESSAGE_SEPARATOR = 'ITEM_TYPE_NEW_MESSAGE_SEPARATOR';
const REPLY_TYPE = 'reply';
const propTypes = {
  activities: PropTypes.arrayOf(PropTypes.shape({
    activity: PropTypes.shape({
      id: PropTypes.string,
      object: PropTypes.shape({
        content: PropTypes.string,
        displayName: PropTypes.string,
        files: PropTypes.shape({
          items: PropTypes.arrayOf(PropTypes.shape({
            image: PropTypes.shape({
              url: PropTypes.string
            }),
            thumbnail: PropTypes.string,
            mimeType: PropTypes.string,
            url: PropTypes.string
          }))
        })
      }),
      actor: PropTypes.object,
      // Are we even using it?
      published: PropTypes.string,
      verb: PropTypes.string
    }),
    type: PropTypes.string,
    isAdditional: PropTypes.bool,
    hasError: PropTypes.bool,
    isFlagged: PropTypes.bool,
    isSelf: PropTypes.bool,
    isPending: PropTypes.bool
  })),
  newMessagesMessage: PropTypes.string.isRequired,
  onActivityDelete: PropTypes.func.isRequired,
  onActivityFlag: PropTypes.func.isRequired,
  onActivityRetry: PropTypes.func.isRequired,
  features: PropTypes.object.isRequired,
  sdkInstance: PropTypes.object.isRequired,
  intl: PropTypes.object.isRequired
};
const defaultProps = {
  activities: []
};

function ActivityList(props) {
  const {
    activities,
    newMessagesMessage,
    onActivityDelete,
    onActivityFlag,
    onActivityRetry,
    features,
    sdkInstance,
    intl
  } = props;
  const items = activities.map(visibleActivity => {
    switch (visibleActivity.type) {
      case ITEM_TYPE_DAY_SEPARATOR:
        {
          const {
            fromDate,
            key,
            now,
            toDate
          } = visibleActivity;
          return /*#__PURE__*/React.createElement("div", {
            className: classNames(styles.separator, 'activity-list-separator'),
            key: key
          }, /*#__PURE__*/React.createElement(DaySeparator, {
            fromDate: fromDate,
            now: now,
            toDate: toDate
          }));
        }

      case ITEM_TYPE_ACTIVITY:
        {
          var _activity$parent;

          const {
            activity,
            currentUser,
            hasError,
            isPending,
            isAdditional,
            isFlagged,
            isFlagPending,
            isSelf,
            name
          } = visibleActivity;
          const adaptiveCardFeatureState = getAdaptiveCardFeatureState(features);
          return /*#__PURE__*/React.createElement(ActivityItem, {
            activity: activity.object,
            actor: activity.actor,
            actorId: activity.actor.id,
            currentUser: currentUser,
            hasError: hasError,
            id: activity.id,
            isAdditional: isAdditional,
            isFlagged: isFlagged,
            isFlagPending: isFlagPending,
            isPending: isPending,
            isReply: ((_activity$parent = activity.parent) === null || _activity$parent === void 0 ? void 0 : _activity$parent.type) === REPLY_TYPE,
            isSelf: isSelf,
            key: activity.id,
            name: name,
            onActivityDelete: onActivityDelete,
            onActivityFlag: onActivityFlag,
            onActivityRetry: onActivityRetry,
            timestamp: formatDate(activity.published),
            verb: activity.verb,
            adaptiveCardFeatureState: adaptiveCardFeatureState,
            sdkInstance: sdkInstance,
            intl: intl
          });
        }

      case ITEM_TYPE_NEW_MESSAGE_SEPARATOR:
        {
          return /*#__PURE__*/React.createElement(NewMessagesSeparator, {
            key: visibleActivity.key,
            message: newMessagesMessage
          });
        }

      default:
        {
          return '';
        }
    }
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-activity-list', styles.activityList)
  }, items);
}

ActivityList.propTypes = propTypes;
ActivityList.defaultProps = defaultProps;

export default ActivityList;
export { ITEM_TYPE_ACTIVITY, ITEM_TYPE_DAY_SEPARATOR, ITEM_TYPE_NEW_MESSAGE_SEPARATOR };
//# sourceMappingURL=index.js.map
