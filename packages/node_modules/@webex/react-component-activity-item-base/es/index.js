import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import PresenceAvatar from '@webex/react-container-presence-avatar';
import { Icon } from '@momentum-ui/react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-activity-item-base__activityItem__LmFjdGl2 {\n  display: flex;\n  flex-flow: row nowrap;\n  width: 100%;\n}\n\n.react-component-activity-item-base__published__LmFjdGl2 {\n  margin-left: 16px;\n  flex: 0 0 auto;\n}\n\n.react-component-activity-item-base__contentContainer__LmFjdGl2 {\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n  width: calc(100% - 100px);\n  border-radius: 1px;\n  padding: 4px 6px;\n}\n\n.react-component-activity-item-base__pending__LmFjdGl2 .react-component-activity-item-base__content__LmFjdGl2 {\n  opacity: 0.25;\n}\n\n.react-component-activity-item-base__meta__LmFjdGl2 {\n  display: flex;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 7px;\n  font-family: CiscoSansTT Regular, 'Helvetica Neue', Arial;\n  font-size: 12px;\n  font-weight: 300;\n  color: #666;\n  text-align: left;\n  word-wrap: break-word;\n  cursor: auto;\n  transition: opacity 300ms;\n  user-select: none;\n  flex-direction: row;\n}\n\n.react-component-activity-item-base__pending__LmFjdGl2 .react-component-activity-item-base__meta__LmFjdGl2 {\n  opacity: 0.25;\n}\n\n.react-component-activity-item-base__displayName__LmFjdGl2 {\n  flex: 0 0 auto;\n  font-weight: 400;\n}\n\n.react-component-activity-item-base__avatarWrapper__LmFjdGl2 {\n  width: 40px;\n  height: 40px;\n  flex-grow: 0;\n  flex-shrink: 0;\n  margin-right: 16px;\n  padding-top: 6px;\n}\n\n.react-component-activity-item-base__selfAvatar__LmFjdGl2 {\n  color: #07c1e4;\n  font-size: 32px;\n}\n\n.react-component-activity-item-base__pending__LmFjdGl2 .react-component-activity-item-base__avatarWrapper__LmFjdGl2 {\n  opacity: 0.25;\n}\n\n.react-component-activity-item-base__error__LmFjdGl2 {\n  color: rgb(218, 0, 0);\n}\n\n.react-component-activity-item-base__error__LmFjdGl2 button {\n  padding: 0;\n  font: inherit;\n  color: inherit;\n  cursor: pointer;\n  background: none;\n  border: none;\n}\n\n.react-component-activity-item-base__failed__LmFjdGl2 .react-component-activity-item-base__status__LmFjdGl2 {\n  font-size: 10px;\n  font-weight: bold;\n  line-height: 14px;\n  color: rgb(218, 0, 0);\n  text-transform: uppercase;\n  cursor: pointer;\n}\n\n/*\n * Hide extra information when same user posts continuously\n */\n.react-component-activity-item-base__contentContainer__LmFjdGl2.react-component-activity-item-base__additional__LmFjdGl2 {\n  margin-top: 0;\n}\n\n.react-component-activity-item-base__activityItem__LmFjdGl2.react-component-activity-item-base__additional__LmFjdGl2 {\n  margin-top: 0;\n  margin-left: 56px;\n}\n\n.react-component-activity-item-base__additional__LmFjdGl2 .react-component-activity-item-base__meta__LmFjdGl2,\n.react-component-activity-item-base__additional__LmFjdGl2 .react-component-activity-item-base__avatarWrapper__LmFjdGl2 {\n  display: none;\n}\n\n/*\n * Align post actions at the bottom right of post\n */\n.react-component-activity-item-base__activityPostActions__LmFjdGl2 {\n  display: flex;\n  margin-top: auto;\n  text-align: right;\n  visibility: hidden;\n  flex: 0 0 auto;\n  flex-direction: row;\n  justify-content: flex-end;\n}\n\n.react-component-activity-item-base__activityPostAction__LmFjdGl2 {\n  margin-left: 4px;\n}\n\n.react-component-activity-item-base__activityPostAction__LmFjdGl2.react-component-activity-item-base__isHighlighted__LmFjdGl2 {\n  visibility: visible;\n}\n\n.react-component-activity-item-base__activityItem__LmFjdGl2:hover .react-component-activity-item-base__activityPostActions__LmFjdGl2 {\n  visibility: visible;\n}\n";
var styles = {"activityItem":"react-component-activity-item-base__activityItem__LmFjdGl2","published":"react-component-activity-item-base__published__LmFjdGl2","contentContainer":"react-component-activity-item-base__contentContainer__LmFjdGl2","pending":"react-component-activity-item-base__pending__LmFjdGl2","content":"react-component-activity-item-base__content__LmFjdGl2","meta":"react-component-activity-item-base__meta__LmFjdGl2","displayName":"react-component-activity-item-base__displayName__LmFjdGl2","avatarWrapper":"react-component-activity-item-base__avatarWrapper__LmFjdGl2","selfAvatar":"react-component-activity-item-base__selfAvatar__LmFjdGl2","error":"react-component-activity-item-base__error__LmFjdGl2","failed":"react-component-activity-item-base__failed__LmFjdGl2","status":"react-component-activity-item-base__status__LmFjdGl2","additional":"react-component-activity-item-base__additional__LmFjdGl2","activityPostActions":"react-component-activity-item-base__activityPostActions__LmFjdGl2","activityPostAction":"react-component-activity-item-base__activityPostAction__LmFjdGl2","isHighlighted":"react-component-activity-item-base__isHighlighted__LmFjdGl2"};
styleInject(css_248z);

const propTypes = {
  actorId: PropTypes.string,
  children: PropTypes.element.isRequired,
  hasError: PropTypes.bool,
  id: PropTypes.string.isRequired,
  isAdditional: PropTypes.bool,
  isFlagged: PropTypes.bool,
  isFlagPending: PropTypes.bool,
  isPending: PropTypes.bool,
  isSelf: PropTypes.bool,
  name: PropTypes.string,
  onActivityDelete: PropTypes.func,
  onActivityFlag: PropTypes.func,
  onActivityRetry: PropTypes.func,
  timestamp: PropTypes.string
};
const defaultProps = {
  actorId: '',
  hasError: false,
  isAdditional: false,
  isFlagged: false,
  isFlagPending: false,
  isPending: false,
  isSelf: false,
  name: '',
  onActivityDelete: () => {},
  onActivityFlag: () => {},
  onActivityRetry: () => {},
  timestamp: ''
};

function ActivityItemBase({
  actorId,
  children,
  id,
  isAdditional,
  hasError,
  isFlagged,
  isFlagPending,
  isPending,
  isSelf,
  name,
  onActivityDelete,
  onActivityFlag,
  onActivityRetry,
  timestamp
}) {
  let deleteAction;
  let flagAction;
  let errorDisplay;
  const displayName = isSelf ? 'You' : name;

  function handleOnDelete() {
    onActivityDelete(id);
  }

  function handleOnFlag() {
    onActivityFlag(id);
  }

  function handleOnRetry() {
    onActivityRetry(id);
  }

  function getActionClassNames({
    highlight = false,
    flagActionPending = false
  } = {}) {
    const actionClassNames = ['activity-post-action', styles.activityPostAction];

    if (highlight) {
      actionClassNames.push('isHighlighted', styles.isHighlighted);
    }

    if (flagActionPending) {
      actionClassNames.push('flagActionPending');
    }

    return actionClassNames;
  }

  if (!isPending) {
    flagAction = /*#__PURE__*/React.createElement("div", {
      className: classNames(getActionClassNames({
        highlight: isFlagged,
        flagActionPending: isFlagPending
      }))
    }, /*#__PURE__*/React.createElement(Icon, {
      ariaLabel: "Flag for follow-up",
      color: "black-100",
      name: isFlagged ? 'flag-active_16' : 'flag_16',
      onClick: handleOnFlag
    }));

    if (isSelf) {
      deleteAction = /*#__PURE__*/React.createElement("div", {
        className: classNames(getActionClassNames())
      }, /*#__PURE__*/React.createElement(Icon, {
        ariaLabel: "Delete message",
        color: "black-100",
        name: "clear_16",
        onClick: handleOnDelete
      }));
    } else {
      deleteAction = /*#__PURE__*/React.createElement("div", {
        className: classNames(getActionClassNames())
      }, /*#__PURE__*/React.createElement("div", {
        className: classNames('webex-action-spacer', styles.actionSpacer)
      }));
    }
  }

  if (hasError) {
    errorDisplay = /*#__PURE__*/React.createElement("div", {
      className: classNames('webex-activity-error', styles.error),
      role: "presentation"
    }, /*#__PURE__*/React.createElement("button", {
      onClick: handleOnRetry
    }, "Unable to post. Click to retry"));
  }

  const activityItemClasses = ['activity-item', styles.activityItem, isAdditional ? classNames('activity-item-additional', styles.additional) : '', isPending ? classNames('activity-item-pending', styles.pending) : ''];
  const avatarClasses = ['webex-avatar-wrapper', 'webex-activity-item-avatar-wrapper', styles.avatarWrapper, isSelf ? styles.selfAvatar : ''];
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(activityItemClasses)
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames(avatarClasses)
  }, /*#__PURE__*/React.createElement(PresenceAvatar, {
    avatarId: actorId,
    isSelfAvatar: isSelf,
    name: name,
    size: 36
  })), /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-content-container', styles.contentContainer)
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-meta', styles.meta)
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-display-name', styles.displayName),
    title: name
  }, displayName), /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-published', styles.published)
  }, timestamp)), /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-activity-content', styles.content)
  }, children), errorDisplay), /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-activity-post-actions', styles.activityPostActions)
  }, flagAction, deleteAction));
}

ActivityItemBase.propTypes = propTypes;
ActivityItemBase.defaultProps = defaultProps;

export default ActivityItemBase;
//# sourceMappingURL=index.js.map
