import { Map, OrderedMap } from 'immutable';

const ADD_ERROR = 'errors/ADD_ERROR';
const REMOVE_ERROR = 'errors/REMOVE_ERROR';
const RESET_ERRORS = 'errors/RESET_ERRORS';
/**
 * Creates an error to track
 * @param {Object} error
 * @param {String} error.actionTitle
 * @param {String} error.id
 * @param {String} error.displayTitle
 * @param {String} error.displaySubtitle
 * @param {Function} error.onAction
 * @param {Boolean} error.temporary
 * @param {String} error.code
 * @returns {Object}
 */

function addError(error) {
  return {
    type: ADD_ERROR,
    payload: {
      error
    }
  };
}
/**
 * Removes an error with the given id
 *
 * @export
 * @param {string} errorId
 * @returns {object}
 */

function removeError(errorId) {
  return {
    type: REMOVE_ERROR,
    payload: {
      errorId
    }
  };
}
/**
 * Resets errors back to the initial state
 *
 * @export
 * @returns {object}
 */

function resetErrors() {
  return {
    type: RESET_ERRORS
  };
}

const initialState = new Map({
  errors: new OrderedMap(),
  hasError: false
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case ADD_ERROR:
      {
        const {
          error
        } = action.payload;
        return state.setIn(['errors', error.id], error).set('hasError', true);
      }

    case REMOVE_ERROR:
      {
        const {
          errorId
        } = action.payload;
        const updatedState = state.deleteIn(['errors', errorId]);

        if (updatedState.get('errors').size === 0) {
          return updatedState.set('hasError', false);
        }

        return updatedState;
      }

    case RESET_ERRORS:
      {
        return initialState;
      }

    default:
      return state;
  }
}

export default reducer;
export { ADD_ERROR, REMOVE_ERROR, RESET_ERRORS, addError, initialState, removeError, resetErrors };
//# sourceMappingURL=index.js.map
