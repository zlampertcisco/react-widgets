import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import PresenceAvatar from '@webex/react-component-presence-avatar';
import { createSelector } from 'reselect';
import moment from 'moment';
import { combineReducers } from 'redux';
import avatar from '@webex/redux-module-avatar';
import presence from '@webex/redux-module-presence';

const getAvatars = state => state.avatar.get('items').toJS();

const getPresence = state => state.presence.get('items').toJS();

const getProps = (state, props) => props;

const getAvatarProps = createSelector([getAvatars, getPresence, getProps], (avatars, presence, props) => {
  const image = props.image || avatars[props.avatarId]; // Allow user to override the avatar image, otherwise get it from the store

  const userPresence = presence[props.avatarId];
  let presenceStatus;

  if (userPresence) {
    presenceStatus = userPresence.status;

    if (userPresence.status === 'inactive' && userPresence.lastActive) {
      // Users are actually only 'inactive' after lastActive is > 24 hours
      const lastActive = moment(userPresence.lastActive);
      const now = moment();

      if (now.diff(lastActive, 'hours') < 24) {
        // User is in limbo, not active and not inactive
        presenceStatus = undefined;
      }
    }
  }

  return {
    image,
    presenceStatus
  };
});

const reducers = {
  avatar,
  presence
};
var reducer = combineReducers(reducers);

function mapStateToProps(state, props) {
  const {
    image,
    presenceStatus
  } = getAvatarProps(state, props);
  return Object.assign({}, props, {
    image,
    presenceStatus
  });
}

const ConnectedPresenceAvatar = connect(mapStateToProps)(PresenceAvatar);
PresenceAvatar.propTypes = {
  avatarId: PropTypes.string,
  baseColor: PropTypes.string,
  iconSize: PropTypes.string,
  image: PropTypes.string,
  isSelfAvatar: PropTypes.bool,
  name: PropTypes.string,
  onClick: PropTypes.func,
  presenceStatus: PropTypes.string
};

export default ConnectedPresenceAvatar;
export { reducer as reducers };
//# sourceMappingURL=index.js.map
