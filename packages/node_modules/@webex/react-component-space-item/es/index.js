import React from 'react';
import PropTypes from 'prop-types';
import { Avatar, SpaceListItem, Button } from '@momentum-ui/react';
import Timer from '@webex/react-component-timer';
import { getTeamColor, NOTIFICATIONS_BADGE_UNMUTE, NOTIFICATIONS_BADGE_UNREAD, NOTIFICATIONS_BADGE_MENTION, NOTIFICATIONS_BADGE_MUTE, NOTIFICATIONS_BADGE_NONE } from '@webex/react-component-utils';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "$brand-font-folder: \"~@momentum-ui/core/fonts\";\n$icon-font-path: \"~@momentum-ui/icons/fonts\";\n\n@import '~@momentum-ui/core/scss/momentum-ui-components';\n\n// Workaround for missing style\n.react-component-space-item__md-decrypting__JGJyYW5k {\n  filter: blur(5px);\n}\n";
styleInject(css_248z);

const propTypes = {
  avatarUrl: PropTypes.string,
  badge: PropTypes.string,
  callStartTime: PropTypes.number,
  hasCalling: PropTypes.bool,
  id: PropTypes.string,
  isDecrypting: PropTypes.bool,
  isUnread: PropTypes.bool,
  name: PropTypes.string,
  onCallClick: PropTypes.func,
  onClick: PropTypes.func,
  searchTerm: PropTypes.string,
  teamColor: PropTypes.string,
  teamName: PropTypes.string,
  type: PropTypes.string
};
const defaultProps = {
  avatarUrl: '',
  badge: NOTIFICATIONS_BADGE_NONE,
  callStartTime: undefined,
  hasCalling: false,
  id: '',
  isDecrypting: false,
  isUnread: false,
  name: '',
  onCallClick: () => {},
  onClick: () => {},
  searchTerm: '',
  teamColor: '',
  teamName: '',
  type: ''
};

function SpaceItem({
  avatarUrl,
  badge,
  callStartTime,
  hasCalling,
  id,
  isUnread,
  name,
  onClick,
  onCallClick,
  teamName,
  teamColor,
  type,
  isDecrypting,
  searchTerm
}) {
  function handleClick() {
    return onClick(id);
  }

  function handleCallClick(e) {
    if (type === 'direct' || hasCalling) {
      e.stopPropagation();
      return onCallClick(id);
    }

    return false;
  } // Show hover call and join in progress buttons


  const hasCallSupport = hasCalling && typeof onCallClick === 'function';
  const avatarElement = /*#__PURE__*/React.createElement(Avatar, {
    backgroundColor: teamColor ? getTeamColor(teamColor, false) : '#E0E0E0',
    isDecrypting: isDecrypting,
    src: avatarUrl,
    title: name,
    type: type === 'group' ? 'group' : ''
  });
  const subheaderElement = /*#__PURE__*/React.createElement("div", {
    style: {
      color: getTeamColor(teamColor, false)
    }
  }, teamName);
  const joinButton = hasCallSupport && callStartTime && /*#__PURE__*/React.createElement(Button, {
    ariaLabel: "Join Call",
    color: "green",
    size: 28,
    onClick: handleCallClick
  }, callStartTime ? /*#__PURE__*/React.createElement(Timer, {
    startTime: callStartTime
  }) : /*#__PURE__*/React.createElement("div", null, "Now"));
  return /*#__PURE__*/React.createElement(SpaceListItem, {
    childrenLeft: avatarElement,
    childrenRight: joinButton,
    header: name,
    isBold: !searchTerm && !isDecrypting && isUnread,
    isAlertOn: badge === NOTIFICATIONS_BADGE_UNMUTE,
    isUnread: !isDecrypting && badge === NOTIFICATIONS_BADGE_UNREAD,
    isMentioned: badge === NOTIFICATIONS_BADGE_MENTION,
    isMuted: badge === NOTIFICATIONS_BADGE_MUTE,
    isDecrypting: isDecrypting,
    subheader: subheaderElement,
    onClick: handleClick,
    searchTerm: searchTerm
  });
}

SpaceItem.propTypes = propTypes;
SpaceItem.defaultProps = defaultProps;

export default SpaceItem;
//# sourceMappingURL=index.js.map
