import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { AutoSizer, List } from 'react-virtualized';
import { Spinner } from '@momentum-ui/react';
import SpaceItem from '@webex/react-component-space-item';
import { hasMentions, getGlobalNotificationState, getBadgeState } from '@webex/react-component-utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$1 = ".react-component-spaces-list__spacesListDark__LnNwYWNl {\n  background-color: #000000\n}\n\n.react-component-spaces-list__spacesListContainer__LnNwYWNl {\n  height: 100%;\n  width: 100%;\n  overflow-y: hidden;\n}\n";
var styles = {"spacesListDark":"react-component-spaces-list__spacesListDark__LnNwYWNl","spacesListContainer":"react-component-spaces-list__spacesListContainer__LnNwYWNl"};
styleInject(css_248z$1);

var css_248z = "$brand-font-folder: \"~@momentum-ui/core/fonts\";\n$icon-font-path: \"~@momentum-ui/icons/fonts\";\n\n@import '~@momentum-ui/core/scss/momentum-ui-components';\n";
styleInject(css_248z);

const propTypes = {
  activeSpaceId: PropTypes.string,
  currentUser: PropTypes.object,
  hasCalling: PropTypes.bool,
  isLoadingMore: PropTypes.bool,
  onCallClick: PropTypes.func,
  onClick: PropTypes.func,
  onScroll: PropTypes.func,
  searchTerm: PropTypes.string,
  spaces: PropTypes.arrayOf(PropTypes.shape({
    avatarUrl: PropTypes.string,
    activityText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
    callStartTime: PropTypes.number,
    id: PropTypes.string,
    isDecrypting: PropTypes.bool,
    isUnread: PropTypes.bool,
    lastActivityTime: PropTypes.string,
    name: PropTypes.string,
    teamColor: PropTypes.string,
    teamName: PropTypes.string,
    type: PropTypes.string
  })),
  features: PropTypes.object
};
const defaultProps = {
  activeSpaceId: '',
  currentUser: null,
  features: null,
  hasCalling: false,
  isLoadingMore: false,
  onCallClick: () => {},
  onClick: () => {},
  onScroll: () => {},
  searchTerm: '',
  spaces: []
};
function SpacesList({
  activeSpaceId,
  currentUser,
  features,
  hasCalling,
  isLoadingMore,
  onCallClick,
  onClick,
  onScroll,
  searchTerm,
  spaces
}) {
  function rowRenderer(options) {
    const {
      key,
      index
    } = options;
    let {
      style
    } = options;

    if (index >= spaces.length) {
      style = Object.assign({
        textAlign: 'center'
      }, style);
      return /*#__PURE__*/React.createElement("div", {
        key: key,
        style: style
      }, /*#__PURE__*/React.createElement(Spinner, {
        size: 20
      }));
    }

    const space = spaces[index];
    const hasMention = hasMentions(currentUser, space);
    const unread = space.isUnread;
    const globalNotificationState = getGlobalNotificationState(features);
    const badge = getBadgeState({
      space,
      unread,
      hasMention,
      globalNotificationState
    });
    return /*#__PURE__*/React.createElement("div", {
      className: classNames(`webex-spaces-list-item-${index}`),
      key: key,
      style: style
    }, /*#__PURE__*/React.createElement(SpaceItem, _extends({
      active: space.id === activeSpaceId,
      badge: badge,
      hasCalling: hasCalling,
      key: key,
      onCallClick: onCallClick,
      onClick: onClick
    }, space, {
      searchTerm: searchTerm
    })));
  }

  const rowCount = isLoadingMore ? spaces.length + 1 : spaces.length;
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-spaces-list-container', styles.spacesListContainer)
  }, /*#__PURE__*/React.createElement(AutoSizer, null, ({
    height,
    width
  }) => /*#__PURE__*/React.createElement(List, {
    className: classNames('webex-spaces-list', styles.spacesListDark),
    height: height,
    onScroll: onScroll,
    rowCount: rowCount,
    rowHeight: 52,
    rowRenderer: rowRenderer,
    width: width
  })));
}
SpacesList.propTypes = propTypes;
SpacesList.defaultProps = defaultProps;

export default SpacesList;
//# sourceMappingURL=index.js.map
