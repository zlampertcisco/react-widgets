import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import classNames from 'classnames';
import { debounce } from 'lodash';
import { autobind } from 'core-decorators';
import { MentionsInput, Mention } from 'react-mentions';
import { addFiles, removeFile, setUserTyping, submitActivity, storeActivityText } from '@webex/redux-module-activity';
import { searchForUser } from '@webex/redux-module-search';
import PresenceAvatar from '@webex/react-container-presence-avatar';
import FileStagingArea from '@webex/react-component-file-staging-area';
import { constructFiles, checkMaxFileSize } from '@webex/react-component-utils';
import { addError, removeError } from '@webex/redux-module-errors';
import uuid from 'uuid';
import { Icon } from '@momentum-ui/react';
import { fromJS } from 'immutable';

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$2 = ".react-container-message-composer__buttonsArea__LmJ1dHRv {\n  padding: 10px 10px 0;\n}\n\n.react-container-message-composer__fileInput__LmJ1dHRv {\n  display: none;\n  width: 32px;\n  height: 32px;\n  overflow: hidden;\n  opacity: 0;\n}\n";
var styles$1 = {"buttonsArea":"react-container-message-composer__buttonsArea__LmJ1dHRv","fileInput":"react-container-message-composer__fileInput__LmJ1dHRv"};
styleInject(css_248z$2);

/* eslint-disable jsx-a11y/label-has-for */

function ComposerButtons({
  onAttachFile,
  composerActions
}) {
  const inputId = `messageFileInput-${uuid.v4()}`;
  return composerActions.attachFiles && /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-message-composer-buttons', styles$1.buttonsArea)
  }, /*#__PURE__*/React.createElement("input", {
    className: classNames('webex-file-input', styles$1.fileInput),
    id: inputId,
    multiple: "multiple",
    onChange: onAttachFile,
    type: "file"
  }), /*#__PURE__*/React.createElement("label", {
    htmlFor: inputId
  }, /*#__PURE__*/React.createElement(Icon, {
    ariaLabel: "Attach Files",
    name: "attachment_16"
  }))) || null;
}

ComposerButtons.propTypes = {
  onAttachFile: PropTypes.func
};
ComposerButtons.defaultProps = {
  onAttachFile: () => {}
};

const UPDATE_TEXTAREA_FOCUS = 'UPDATE_TEXTAREA_FOCUS';
function blurTextArea() {
  return {
    type: UPDATE_TEXTAREA_FOCUS,
    payload: {
      hasTextAreaFocus: false
    }
  };
}
function focusTextArea() {
  return {
    type: UPDATE_TEXTAREA_FOCUS,
    payload: {
      hasTextAreaFocus: true
    }
  };
}

var css_248z$1 = ".react-container-message-composer__messageComposer__Lm1lc3Nh {\n  position: relative;\n  height: auto;\n  border-top: 1px solid #ebebeb;\n  transition: all 0.25s cubic-bezier(0.22, 0.61, 0.36, 1);\n}\n\n.react-container-message-composer__hasFocus__Lm1lc3Nh {\n  border-top-color: #7ddef0;\n}\n\n.react-container-message-composer__addFileContainer__Lm1lc3Nh {\n  position: absolute;\n  top: 12px;\n  left: 20px;\n}\n\n.react-container-message-composer__textAreaContainer__Lm1lc3Nh {\n  background-color: #f5f5f5;\n  padding: 10px;\n}\n\n.react-container-message-composer__textarea__Lm1lc3Nh {\n  background-color: #f5f5f5;\n}\n\n.react-container-message-composer__textarea__Lm1lc3Nh::placeholder {\n  overflow: hidden;\n  color: #858688;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.react-container-message-composer__textareaContainerBig__Lm1lc3Nh {\n  height: 150px;\n}\n";
var styles = {"messageComposer":"react-container-message-composer__messageComposer__Lm1lc3Nh","hasFocus":"react-container-message-composer__hasFocus__Lm1lc3Nh","addFileContainer":"react-container-message-composer__addFileContainer__Lm1lc3Nh","textAreaContainer":"react-container-message-composer__textAreaContainer__Lm1lc3Nh","textarea":"react-container-message-composer__textarea__Lm1lc3Nh","textareaContainerBig":"react-container-message-composer__textareaContainerBig__Lm1lc3Nh"};
styleInject(css_248z$1);

var css_248z = "/* Using !important here to override inline styles from react-mentions */\n\n.react-container-message-composer__mentions__LyogVXNp {\n  position: static;\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  font-size: 14px;\n}\n\n.react-container-message-composer__mentions__control__LyogVXNp {\n  position: relative;\n  max-height: 100px;\n}\n\n.react-container-message-composer__mentions__input__LyogVXNp {\n  display: block;\n  margin: 0;\n  font-family: inherit;\n  font-size: 14px;\n  font-weight: 200;\n  background: transparent;\n  border: none;\n  outline: none;\n  box-sizing: border-box;\n}\n\n.react-container-message-composer__mentions__input__LyogVXNp:focus {\n  outline: none;\n  box-shadow: none;\n}\n\n.react-container-message-composer__mentions--singleLine__LyogVXNp .react-container-message-composer__mentions__control__LyogVXNp {\n  display: inline-block;\n  width: 130px;\n}\n\n.react-container-message-composer__mentions--singleLine__LyogVXNp .react-container-message-composer__mentions__higlighter__LyogVXNp {\n  padding: 1px;\n  border: 2px inset transparent;\n}\n\n.react-container-message-composer__mentions--singleLine__LyogVXNp .react-container-message-composer__mentions__input__LyogVXNp {\n  padding: 1px;\n  border: 0;\n}\n\n.react-container-message-composer__mentions--multiLine__LyogVXNp .react-container-message-composer__mentions__highlighter__LyogVXNp {\n  padding: 2px;\n  margin: 0;\n}\n\n.react-container-message-composer__mentions--multiLine__LyogVXNp .react-container-message-composer__mentions__input__LyogVXNp {\n  /* stylelint-disable-next-line declaration-no-important */\n  overflow-y: auto !important;\n  resize: none;\n}\n\n.react-container-message-composer__mentions--multiLine__LyogVXNp .react-container-message-composer__mentions__input__LyogVXNp::placeholder {\n  overflow: hidden;\n  color: #858688;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.react-container-message-composer__mentions__LyogVXNp .react-container-message-composer__mentions__suggestions__LyogVXNp {\n  /* stylelint-disable declaration-no-important */\n  position: static !important;\n  order: -1;\n  left: 0 !important;\n  margin-top: 0 !important;\n}\n\n.react-container-message-composer__mentions__suggestions__list__LyogVXNp {\n  max-height: 85px;\n  overflow-y: auto;\n  font-size: 14px;\n  background-color: #fff;\n}\n\n.react-container-message-composer__mentions__suggestions__item__LyogVXNp {\n  padding: 5px 15px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.15);\n}\n\n.react-container-message-composer__content__LyogVXNp {\n  display: flex;\n}\n\n.react-container-message-composer__avatar__LyogVXNp {\n  flex: 0 0 auto;\n  width: 24px;\n  height: 24px;\n  margin-right: 10px;\n}\n\n.react-container-message-composer__highlightedDisplay__LyogVXNp {\n  flex: 1 1 auto;\n  display: flex;\n  align-items: center;\n}\n\n.react-container-message-composer__mentions__suggestions__item--focused__LyogVXNp {\n  background-color: #ececed;\n}\n\n.react-container-message-composer__mentions__mention__LyogVXNp {\n  background-color: #ececed;\n}\n";
var mentionStyles = {"mentions":"react-container-message-composer__mentions__LyogVXNp","mentions__control":"react-container-message-composer__mentions__control__LyogVXNp","mentions__input":"react-container-message-composer__mentions__input__LyogVXNp","mentions--singleLine":"react-container-message-composer__mentions--singleLine__LyogVXNp","mentions__higlighter":"react-container-message-composer__mentions__higlighter__LyogVXNp","mentions--multiLine":"react-container-message-composer__mentions--multiLine__LyogVXNp","mentions__highlighter":"react-container-message-composer__mentions__highlighter__LyogVXNp","mentions__suggestions":"react-container-message-composer__mentions__suggestions__LyogVXNp","mentions__suggestions__list":"react-container-message-composer__mentions__suggestions__list__LyogVXNp","mentions__suggestions__item":"react-container-message-composer__mentions__suggestions__item__LyogVXNp","content":"react-container-message-composer__content__LyogVXNp","avatar":"react-container-message-composer__avatar__LyogVXNp","highlightedDisplay":"react-container-message-composer__highlightedDisplay__LyogVXNp","mentions__suggestions__item--focused":"react-container-message-composer__mentions__suggestions__item--focused__LyogVXNp","mentions__mention":"react-container-message-composer__mentions__mention__LyogVXNp"};
styleInject(css_248z);

var _class;
const injectedPropTypes = {
  activity: PropTypes.object.isRequired,
  avatar: PropTypes.object.isRequired,
  conversation: PropTypes.object.isRequired,
  sparkInstance: PropTypes.object.isRequired,
  users: PropTypes.object.isRequired,
  currentUser: PropTypes.object.isRequired,
  messageComposer: PropTypes.object.isRequired,
  addFiles: PropTypes.func.isRequired,
  blurTextArea: PropTypes.func.isRequired,
  focusTextArea: PropTypes.func.isRequired,
  removeFile: PropTypes.func.isRequired,
  setUserTyping: PropTypes.func.isRequired,
  submitActivity: PropTypes.func.isRequired,
  searchForUser: PropTypes.func.isRequired,
  storeActivityText: PropTypes.func.isRequired,
  addError: PropTypes.func.isRequired,
  removeError: PropTypes.func.isRequired
};
const propTypes = {
  composerActions: PropTypes.shape({
    attachFiles: PropTypes.bool
  }).isRequired,
  onSubmit: PropTypes.func.isRequired,
  placeholder: PropTypes.string,
  showMentions: PropTypes.bool,
  ...injectedPropTypes
};
const defaultProps = {
  placeholder: '',
  showMentions: false
};
let MessageComposer = (_class = class MessageComposer extends Component {
  constructor(props) {
    super(props);
    this.timerId = 0;
    this.setUserStartTyping = debounce(this.setUserStartTyping, 500, {
      leading: true,
      trailing: false
    });
  }

  shouldComponentUpdate(nextProps) {
    const {
      props
    } = this;
    return props.activity !== nextProps.activity || props.placeholder !== nextProps.placeholder;
  }

  setUserTyping(state) {
    const {
      props
    } = this;
    const {
      conversation,
      sparkInstance
    } = props;
    props.setUserTyping(state, conversation, sparkInstance);
  }

  setUserStopTyping() {
    this.setUserTyping(false);
  }

  setUserStartTyping() {
    this.setUserTyping(true);
  }

  handleTextChange(e, newValue, newValuePlainText) {
    const {
      props
    } = this;
    let {
      value
    } = e.target;

    if (newValue && newValue.length) {
      value = newValue;
    }

    props.storeActivityText(value, newValuePlainText);
    clearTimeout(this.timerId);

    if (value === '') {
      this.setUserTyping(false);
    } else {
      if (!props.activity.getIn(['status', 'isTyping'])) {
        this.setUserStartTyping();
      }

      this.timerId = setTimeout(this.setUserStopTyping, 3000);
    }
  }

  handleKeyDown(e) {
    if (e.keyCode === 13 && !e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {
      this.handleSubmit();
      e.preventDefault();
    }
  }

  handleSubmit() {
    const {
      props
    } = this;
    const {
      activity,
      conversation,
      sparkInstance,
      currentUser,
      onSubmit
    } = props;

    if (activity.get('text').length === 0 && activity.get('files').size === 0) {
      return;
    }

    this.setUserTyping(false);
    props.submitActivity(conversation, activity, currentUser, sparkInstance);

    if (typeof onSubmit === 'function') {
      onSubmit();
    }
  }

  handleTextAreaBlur() {
    const {
      props
    } = this;
    const {
      conversation,
      sparkInstance
    } = props;
    props.blurTextArea();
    props.setUserTyping(false, conversation, sparkInstance);
  }

  handleTextAreaFocus() {
    this.props.focusTextArea();
  }

  handleAddFile(e) {
    e.stopPropagation();
    e.preventDefault();

    if (e.target.files.length) {
      const {
        props
      } = this;
      const {
        activity,
        conversation,
        sparkInstance
      } = props;
      const files = constructFiles(e.target.files);

      if (checkMaxFileSize(files, props.addError, props.removeError)) {
        props.addFiles(conversation, activity, files, sparkInstance);
      } // Clear the value of the input so the same file can be added again.


      e.target.value = '';
    }
  }

  handleFileRemove(id) {
    const {
      props
    } = this;
    props.removeFile(id, props.activity);
  }

  searchForMention(term) {
    const {
      avatar,
      conversation,
      currentUser
    } = this.props;
    const participants = [];

    if (conversation.has('participants') && conversation.get('participants').count()) {
      conversation.get('participants').toJS().forEach(p => {
        if (currentUser.id !== p.id) {
          participants.push({
            display: p.displayName,
            id: p.id,
            avatarUrl: avatar.getIn(['items', p.id])
          });
        }
      });

      if (term) {
        return participants.filter(p => p.display.toLowerCase().includes(term.toLowerCase()));
      }
    }

    return participants;
  }

  static renderSuggestion(entry, search, highlightedDisplay) {
    return /*#__PURE__*/React.createElement("div", {
      className: mentionStyles.content
    }, /*#__PURE__*/React.createElement("div", {
      className: mentionStyles.avatar
    }, /*#__PURE__*/React.createElement(PresenceAvatar, {
      avatarId: entry.id,
      name: entry.display,
      size: 24
    })), /*#__PURE__*/React.createElement("div", {
      className: mentionStyles.highlightedDisplay
    }, highlightedDisplay));
  }

  render() {
    let text;
    const {
      props
    } = this;
    const {
      activity,
      composerActions,
      messageComposer,
      placeholder,
      conversation
    } = this.props;
    const files = activity.get('files');

    if (activity && activity.has('text')) {
      text = activity.get('text');
    }

    const textAreaFocusStyle = messageComposer.getIn(['status', 'hasTextAreaFocus']) ? styles.hasFocus : '';
    const mentionMarkup = '@{__display__}|__id__|'; // Only show mentions if this is not a one on one convo

    const showMentions = props.showMentions && !conversation.getIn(['status', 'isOneOnOne']);
    const getData = showMentions ? this.searchForMention : () => {};
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('webex-message-composer', styles.messageComposer, textAreaFocusStyle)
    }, /*#__PURE__*/React.createElement(ComposerButtons, {
      composerActions: composerActions,
      onAttachFile: this.handleAddFile
    }), files && files.count() > 0 && /*#__PURE__*/React.createElement(FileStagingArea, {
      files: files,
      onFileRemove: this.handleFileRemove
    }), /*#__PURE__*/React.createElement("div", {
      className: classNames('webex-textarea-container', styles.textAreaContainer)
    }, /*#__PURE__*/React.createElement(MentionsInput, {
      classNames: mentionStyles,
      markup: mentionMarkup,
      onBlur: this.handleTextAreaBlur,
      onChange: this.handleTextChange,
      onFocus: this.handleTextAreaFocus,
      onKeyDown: this.handleKeyDown,
      onSubmit: this.handleSubmit,
      placeholder: placeholder,
      rows: 1,
      value: text
    }, /*#__PURE__*/React.createElement(Mention, {
      className: mentionStyles.mentions__mention,
      data: getData,
      renderSuggestion: MessageComposer.renderSuggestion,
      trigger: "@"
    }))));
  }

}, (_applyDecoratedDescriptor(_class.prototype, "setUserTyping", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "setUserTyping"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "setUserStopTyping", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "setUserStopTyping"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleTextChange", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleTextChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleKeyDown", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleKeyDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleSubmit", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleSubmit"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleTextAreaBlur", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleTextAreaBlur"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleTextAreaFocus", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleTextAreaFocus"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleAddFile", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleAddFile"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "handleFileRemove", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "handleFileRemove"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "searchForMention", [autobind], Object.getOwnPropertyDescriptor(_class.prototype, "searchForMention"), _class.prototype)), _class);
MessageComposer.propTypes = propTypes;
MessageComposer.defaultProps = defaultProps;

function mapStateToProps(state, ownProps) {
  return {
    activity: state.activity,
    avatar: state.avatar,
    conversation: state.conversation,
    sparkInstance: ownProps.sparkInstance || state.spark.get('spark'),
    users: state.users,
    messageComposer: state.messageComposer,
    currentUser: state.users.getIn(['byId', state.users.get('currentUserId')])
  };
}

var container = connect(mapStateToProps, dispatch => bindActionCreators({
  addFiles,
  blurTextArea,
  focusTextArea,
  removeFile,
  setUserTyping,
  submitActivity,
  searchForUser,
  storeActivityText,
  addError,
  removeError
}, dispatch))(MessageComposer);

const initialState = fromJS({
  status: {
    hasTextAreaFocus: false
  }
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case UPDATE_TEXTAREA_FOCUS:
      return state.setIn(['status', 'hasTextAreaFocus'], action.payload.state);

    default:
      return state;
  }
}

export default container;
export { MessageComposer, UPDATE_TEXTAREA_FOCUS, blurTextArea, focusTextArea, reducer };
//# sourceMappingURL=index.js.map
