import { Record, fromJS } from 'immutable';

function constructTeam(team) {
  return {
    id: team.id,
    color: team.teamColor,
    generalConversationId: team.generalConversationUuid,
    displayName: team.displayName,
    description: team.summary,
    status: {
      isArchived: team.archived
    }
  };
}
function constructTeams(teams) {
  return teams.map(constructTeam);
}

const FETCH_TEAMS = 'teams/FETCH_TEAMS';
const STORE_TEAMS = 'teams/STORE_TEAMS';
const STORE_TEAMS_ERROR = 'teams/STORE_TEAMS_ERROR';

function startFetchTeams() {
  return {
    type: FETCH_TEAMS
  };
}

function storeTeamError(error) {
  return {
    type: STORE_TEAMS_ERROR,
    payload: {
      error
    }
  };
}

function storeTeams(teams) {
  return {
    type: STORE_TEAMS,
    payload: {
      teams: constructTeams(teams)
    }
  };
}
/**
 * Fetches teams from the conversation server
 * @param {object} sparkInstance
 * @returns {Thunk}
 */


function fetchTeams(sparkInstance) {
  return dispatch => {
    dispatch(startFetchTeams());
    return sparkInstance.internal.team.list().then(teams => {
      if (teams && teams.length) {
        dispatch(storeTeams(teams));
        return Promise.resolve(teams);
      }

      return Promise.resolve();
    }).catch(e => {
      dispatch(storeTeamError(e));
      return Promise.reject(new Error('Could not fetch teams', e));
    });
  };
}

const Team = Record({
  id: null,
  color: '',
  generalConversationId: null,
  displayName: '',
  description: '',
  status: {
    isArchived: false
  }
});
const Status = Record({
  isFetching: false,
  hasFetched: false,
  error: undefined
});
const initialState = fromJS({
  byId: {},
  status: new Status()
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case FETCH_TEAMS:
      {
        return state.setIn(['status', 'isFetching'], true);
      }

    case STORE_TEAMS:
      {
        const teams = {};
        action.payload.teams.forEach(t => {
          teams[t.id] = new Team(t);
        });
        return state.mergeIn(['byId'], teams).set('status', new Status({
          isFetching: false,
          hasFetched: true,
          error: undefined
        }));
      }

    case STORE_TEAMS_ERROR:
      {
        return state.set('status', new Status({
          isFetching: false,
          hasFetched: false,
          error: action.payload.error
        }));
      }

    default:
      return state;
  }
}

export default reducer;
export { FETCH_TEAMS, STORE_TEAMS, STORE_TEAMS_ERROR, fetchTeams, initialState };
//# sourceMappingURL=index.js.map
