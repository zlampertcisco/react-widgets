import { fromJS } from 'immutable';
import isEmail from 'validator/lib/isEmail';
import { deconstructHydraId } from '@webex/react-component-utils';

function normalizePersonResult(rawPerson) {
  const person = { ...rawPerson,
    id: deconstructHydraId(rawPerson.id).id,
    name: rawPerson.name ? rawPerson.name : rawPerson.displayName
  };
  return person;
}

const STORE_SEARCH_ERROR = 'search/STORE_SEARCH_ERROR';
const STORE_SEARCH_RESULTS = 'search/STORE_SEARCH_RESULTS';
const STORE_SEARCH_TERM = 'search/STORE_SEARCH_TERM';
const initialState = fromJS({
  error: null,
  status: {
    isError: false
  },
  searchResults: {}
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_SEARCH_TERM:
      return state.setIn(['status', 'isError'], false).setIn(['searchResults', action.payload.searchTerm, 'inProgress'], true);

    case STORE_SEARCH_ERROR:
      return state.setIn(['status', 'isError'], true).set('error', action.payload.error);

    case STORE_SEARCH_RESULTS:
      return state.mergeIn(['searchResults', action.payload.searchTerm], fromJS({
        inProgress: false,
        date: Date.now(),
        results: action.payload.searchResults
      }));

    default:
      return state;
  }
}

function storeSearchTerm(searchTerm) {
  return {
    type: STORE_SEARCH_TERM,
    payload: {
      searchTerm
    }
  };
}

function storeSearchError(error) {
  return {
    type: STORE_SEARCH_ERROR,
    payload: {
      error
    }
  };
}

function storeSearchResults(searchTerm, searchResults) {
  return {
    type: STORE_SEARCH_RESULTS,
    payload: {
      searchTerm,
      searchResults
    }
  };
}
/**
 * Searches the people endpoint for `searchTerm`
 *
 * @export
 * @param {string} searchTerm
 * @param {object} spark
 * @returns {function}
 */


function searchForUser(searchTerm, spark) {
  return dispatch => {
    dispatch(storeSearchTerm(searchTerm));

    if (isEmail(searchTerm)) {
      return spark.people.list({
        email: searchTerm
      }).then(response => dispatch(storeSearchResults(searchTerm, response.items.map(normalizePersonResult)))).catch(error => dispatch(storeSearchError(error)));
    }

    return spark.internal.search.people({
      query: searchTerm
    }).then(users => {
      dispatch(storeSearchResults(searchTerm, users));
      return Promise.resolve(users);
    }).catch(error => {
      dispatch(storeSearchError(error));
      return Promise.reject(error);
    });
  };
}

export default reducer;
export { STORE_SEARCH_ERROR, STORE_SEARCH_RESULTS, STORE_SEARCH_TERM, initialState, searchForUser };
//# sourceMappingURL=index.js.map
