import { Map, OrderedMap } from 'immutable';
import { bufferToBlob } from '@webex/react-component-utils';

const FETCH_SHARE = 'share/FETCH_SHARE';
const RECEIVE_SHARE = 'share/RECEIVE_SHARE';
const initialState = new Map({
  files: new OrderedMap({})
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case RECEIVE_SHARE:
      {
        const {
          file,
          fileObject
        } = action.payload;
        const {
          blob,
          objectUrl
        } = bufferToBlob(file);
        const key = fileObject.url;
        return state.setIn(['files', key], new Map({
          name: fileObject.displayName,
          mimeType: fileObject.mimeType,
          fileSize: fileObject.fileSize,
          isFetching: false,
          blob,
          objectUrl
        }));
      }

    case FETCH_SHARE:
      {
        const key = action.payload.fileObject.url;
        return state.setIn(['files', key, 'isFetching'], true);
      }

    default:
      {
        return state;
      }
  }
}

function fetchShare(fileObject) {
  return {
    type: FETCH_SHARE,
    payload: {
      fileObject
    }
  };
}

function receiveShare(payload) {
  return {
    type: RECEIVE_SHARE,
    payload
  };
}

function retrieveSharedFile(fileObject, spark) {
  return dispatch => {
    dispatch(fetchShare(fileObject));
    return spark.internal.conversation.download(fileObject).then(file => {
      dispatch(receiveShare({
        file,
        fileObject
      }));
      return file;
    });
  };
}

export default reducer;
export { FETCH_SHARE, RECEIVE_SHARE, initialState, retrieveSharedFile };
//# sourceMappingURL=index.js.map
