{"version":3,"file":"index.js","sources":["../src/helpers.js","../src/actions.js","../src/reducer.js","../src/index.js"],"sourcesContent":["export function prepareStatusResponses(responses) {\n  // Convert array of responses to an object\n  const processed = {};\n\n  responses.forEach((response) => {\n    if (!response.subject) {\n      return;\n    }\n    // Undefined status means we are unable to get presence for that user.\n    // Setting to false keeps us from retrying the fetch\n    processed[response.subject] = response.status || false;\n  });\n\n  return processed;\n}\n\nexport function prepareSingleStatusResponse(response) {\n  const processed = {};\n\n  processed[response.subject] = response;\n\n  return processed;\n}\n","import {\n  prepareSingleStatusResponse,\n  prepareStatusResponses\n} from './helpers';\n\nexport const SET_ERROR = 'presence/SET_ERROR';\nexport const SET_PRESENCE_STATUS = 'presence/SET_PRESENCE_STATUS';\nexport const UPDATE_MODULE_STATUS = 'presence/UPDATE_MODULE_STATUS';\nexport const UPDATE_USER_STATUS_ERROR = 'presence/UPDATE_USER_STATUS_ERROR';\n\nfunction updateStatus(status) {\n  return {\n    type: UPDATE_MODULE_STATUS,\n    payload: {\n      status\n    }\n  };\n}\n\nfunction setError(error) {\n  return {\n    type: SET_ERROR,\n    payload: {\n      error\n    }\n  };\n}\n\nfunction setPresenceStatus(status) {\n  return {\n    type: SET_PRESENCE_STATUS,\n    payload: {\n      status\n    }\n  };\n}\n\n/**\n * active: Indicates that the user is \"active\" in the system for the giventtl or until another event is received.\n * inactive: Indicates that the user should be considered \"inactive\" for the given ttl or until another event\n *  is received\n * dnd: Indicates a desire by the user to not be disturbed for the given ttl.A TTL= 0 indicates canceling current\n * dnd state\n  * ooo: Indicates that the user is \"out of office\" for the given ttl.A TTL= 0 indicates canceling current ooo state\n */\n/**\n * @type {('active', 'inactive', 'dnd', 'ooo')} EventType - Types of user statuses\n */\n\n/**\n * Sets the current user's status\n * @param {EventType} eventType\n * @param {number} ttl Time To Live for the event in seconds.\n * @param {object} spark\n * @returns {Thunk}\n */\nexport function setUserPresenceStatus(eventType, ttl, spark) {\n  return (dispatch) => {\n    dispatch(updateStatus({isSettingUserStatus: true}));\n\n    return spark.internal.presence.setStatus(eventType, ttl)\n      .then(() =>\n        dispatch(updateStatus({isSettingUserStatus: false})))\n      .catch((error) =>\n        dispatch(setError(error)));\n  };\n}\n\n/**\n * Async requests a specific user's status\n * @param {array | string} userIds\n * @param {object} spark\n * @returns {Thunk}\n */\nexport function getCurrentPresenceStatus(userIds, spark) {\n  const subjects = Array.isArray(userIds) ? userIds : [userIds];\n\n  return (dispatch) =>\n    spark.internal.presence.list(subjects)\n      .then((presenceResponse) => dispatch(setPresenceStatus(presenceResponse.statusList)));\n}\n\n/**\n * Fetches and subscribes to a user's presence status\n * @param {array | string} userIds\n * @param {object} spark\n * @returns {Thunk}\n */\nexport function subscribeToPresenceUpdates(userIds, spark) {\n  return (dispatch, getState) => {\n    const subjects = Array.isArray(userIds) ? userIds : [userIds];\n    const {presence} = getState();\n    const newUserIds = subjects.filter((subject) => !presence.hasIn(['items', subject]));\n\n    if (newUserIds.length === 0) {\n      return Promise.resolve();\n    }\n    const emptyStatuses = newUserIds.map((id) => ({subject: id, status: false}));\n\n    dispatch(setPresenceStatus(prepareStatusResponses(emptyStatuses)));\n    // normal subscription ttl in seconds\n    const subscriptionTtl = 600;\n\n    return spark.internal.presence.subscribe(newUserIds, subscriptionTtl)\n      .then((presenceResponse) => {\n        spark.internal.mercury.on('event:apheleia.subscription_update', (event) => {\n          dispatch(setPresenceStatus(prepareSingleStatusResponse(event.data)));\n        });\n\n        return dispatch(setPresenceStatus(prepareStatusResponses(presenceResponse.responses)));\n      });\n  };\n}\n\n/**\n * Tells the service to stop sending status updates\n * @param {array | string} userIds\n * @param {object} spark\n * @returns {Thunk}\n */\nexport function unsubscribeFromPresenceUpdates(userIds, spark) {\n  const subjects = Array.isArray(userIds) ? userIds : [userIds];\n\n  return (dispatch) =>\n    spark.internal.presence.unsubscribe(subjects)\n      .then(() => {\n        // Setting status to undefined clears the subject from items\n        const clearStatus = {};\n\n        subjects.forEach((subject) => {\n          clearStatus[subject] = undefined;\n        });\n\n        return dispatch(setPresenceStatus(clearStatus));\n      });\n}\n","import {fromJS} from 'immutable';\n\nimport {\n  SET_ERROR,\n  SET_PRESENCE_STATUS,\n  UPDATE_MODULE_STATUS\n} from './actions';\n\nexport const initialState = fromJS({\n  status: {\n    isError: false,\n    isSettingUserStatus: false\n  },\n  items: {},\n  error: null\n});\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_PRESENCE_STATUS:\n    {\n      const {status} = action.payload;\n\n      return state.mergeDeep({items: fromJS(status)});\n    }\n    case UPDATE_MODULE_STATUS:\n      return state.mergeDeep({\n        status: action.payload.status\n      });\n    case SET_ERROR:\n      return state.set('error', action.payload.error).setIn(['status', 'isError'], true);\n    default:\n      return state;\n  }\n}\n","export {default, initialState} from './reducer';\nexport * from './actions';\n\n// active:\n// Indicates that the user is \"active\" in the system for the given ttl or until another event is received.\nexport const PRESENCE_TYPE_ACTIVE = 'active';\n// inactive:\n// Indicates that the user should be considered \"inactive\" for the given ttl or until another event is received\nexport const PRESENCE_TYPE_INACTIVE = 'inactive';\n// dnd:\n// Indicates a desire by the user to not be disturbed for the given ttl.A TTL= 0 indicates canceling current dnd state\nexport const PRESENCE_TYPE_DND = 'dnd';\n// ooo:\n// Indicates that the user is \"out of office\" for the given ttl.A TTL= 0 indicates canceling current ooo state\nexport const PRESENCE_TYPE_OOO = 'ooo';\n"],"names":["prepareStatusResponses","responses","processed","forEach","response","subject","status","prepareSingleStatusResponse","SET_ERROR","SET_PRESENCE_STATUS","UPDATE_MODULE_STATUS","UPDATE_USER_STATUS_ERROR","updateStatus","type","payload","setError","error","setPresenceStatus","setUserPresenceStatus","eventType","ttl","spark","dispatch","isSettingUserStatus","internal","presence","setStatus","then","catch","getCurrentPresenceStatus","userIds","subjects","Array","isArray","list","presenceResponse","statusList","subscribeToPresenceUpdates","getState","newUserIds","filter","hasIn","length","Promise","resolve","emptyStatuses","map","id","subscriptionTtl","subscribe","mercury","on","event","data","unsubscribeFromPresenceUpdates","unsubscribe","clearStatus","undefined","initialState","fromJS","isError","items","reducer","state","action","mergeDeep","set","setIn","PRESENCE_TYPE_ACTIVE","PRESENCE_TYPE_INACTIVE","PRESENCE_TYPE_DND","PRESENCE_TYPE_OOO"],"mappings":"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"}