{"version":3,"file":"index.js","sources":["../../../../../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport styles from './styles.css';\n\nconst propTypes = {\n  isInformative: PropTypes.bool,\n  primaryText: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object\n  ]).isRequired\n};\n\nconst defaultProps = {\n  isInformative: false\n};\n\nfunction ListSeparator({\n  isInformative,\n  primaryText\n}) {\n  const mainStyles = ['separator', styles.separator];\n  const textStyles = ['separator-text', styles.separatorText];\n  const informativeClass = 'informative';\n\n  if (isInformative) {\n    mainStyles.push(informativeClass);\n    mainStyles.push(styles[informativeClass]);\n    textStyles.push(informativeClass);\n    textStyles.push(styles[informativeClass]);\n  }\n\n  return (\n    <div className={classNames(mainStyles)}>\n      <p className={classNames(textStyles)}>{primaryText}</p>\n    </div>\n  );\n}\n\nListSeparator.propTypes = propTypes;\nListSeparator.defaultProps = defaultProps;\n\nexport default ListSeparator;\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","propTypes","isInformative","PropTypes","bool","primaryText","oneOfType","string","object","isRequired","defaultProps","ListSeparator","mainStyles","styles","separator","textStyles","separatorText","informativeClass","push","classNames"],"mappings":";;;;AAAA,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+B;AAC7B,MAAKA,GAAG,KAAK,KAAK,CAAlB,EAAsBA,GAAG,GAAG,EAAN;AACtB,MAAIC,QAAQ,GAAGD,GAAG,CAACC,QAAnB;;AAEA,MAAI,CAACF,GAAD,IAAQ,OAAOG,QAAP,KAAoB,WAAhC,EAA6C;AAAE;AAAS;;AAExD,MAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACE,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAA5B;AACA,MAAIC,KAAK,GAAGH,QAAQ,CAACI,aAAT,CAAuB,OAAvB,CAAZ;AACAD,EAAAA,KAAK,CAACE,IAAN,GAAa,UAAb;;AAEA,MAAIN,QAAQ,KAAK,KAAjB,EAAwB;AACtB,QAAIE,IAAI,CAACK,UAAT,EAAqB;AACnBL,MAAAA,IAAI,CAACM,YAAL,CAAkBJ,KAAlB,EAAyBF,IAAI,CAACK,UAA9B;AACD,KAFD,MAEO;AACLL,MAAAA,IAAI,CAACO,WAAL,CAAiBL,KAAjB;AACD;AACF,GAND,MAMO;AACLF,IAAAA,IAAI,CAACO,WAAL,CAAiBL,KAAjB;AACD;;AAED,MAAIA,KAAK,CAACM,UAAV,EAAsB;AACpBN,IAAAA,KAAK,CAACM,UAAN,CAAiBC,OAAjB,GAA2Bb,GAA3B;AACD,GAFD,MAEO;AACLM,IAAAA,KAAK,CAACK,WAAN,CAAkBR,QAAQ,CAACW,cAAT,CAAwBd,GAAxB,CAAlB;AACD;AACF;;;;;;ACnBD,MAAMe,SAAS,GAAG;AAChBC,EAAAA,aAAa,EAAEC,SAAS,CAACC,IADT;AAEhBC,EAAAA,WAAW,EAAEF,SAAS,CAACG,SAAV,CAAoB,CAC/BH,SAAS,CAACI,MADqB,EAE/BJ,SAAS,CAACK,MAFqB,CAApB,EAGVC;AALa,CAAlB;AAQA,MAAMC,YAAY,GAAG;AACnBR,EAAAA,aAAa,EAAE;AADI,CAArB;;AAIA,SAASS,aAAT,CAAuB;AACrBT,EAAAA,aADqB;AAErBG,EAAAA;AAFqB,CAAvB,EAGG;AACD,QAAMO,UAAU,GAAG,CAAC,WAAD,EAAcC,MAAM,CAACC,SAArB,CAAnB;AACA,QAAMC,UAAU,GAAG,CAAC,gBAAD,EAAmBF,MAAM,CAACG,aAA1B,CAAnB;AACA,QAAMC,gBAAgB,GAAG,aAAzB;;AAEA,MAAIf,aAAJ,EAAmB;AACjBU,IAAAA,UAAU,CAACM,IAAX,CAAgBD,gBAAhB;AACAL,IAAAA,UAAU,CAACM,IAAX,CAAgBL,MAAM,CAACI,gBAAD,CAAtB;AACAF,IAAAA,UAAU,CAACG,IAAX,CAAgBD,gBAAhB;AACAF,IAAAA,UAAU,CAACG,IAAX,CAAgBL,MAAM,CAACI,gBAAD,CAAtB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEE,UAAU,CAACP,UAAD;AAA1B,kBACE;AAAG,IAAA,SAAS,EAAEO,UAAU,CAACJ,UAAD;AAAxB,KAAuCV,WAAvC,CADF,CADF;AAKD;;AAEDM,aAAa,CAACV,SAAd,GAA0BA,SAA1B;AACAU,aAAa,CAACD,YAAd,GAA6BA,YAA7B;;;;"}