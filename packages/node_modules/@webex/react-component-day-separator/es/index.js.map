{"version":3,"file":"index.js","sources":["../src/calculateDateText.js","../src/index.js"],"sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport {\n  FormattedDate,\n  FormattedMessage\n} from 'react-intl';\n\nexport default function calculateDateText(fromDate, now, toDate) {\n  let text;\n  // toDate and fromDate aren't in the same year OR\n  // toDate is not in current year, then show year.\n  const sameYearMessages = toDate.diff(fromDate, 'years') === 0;\n  const sameYearNow = toDate.diff(now, 'years') === 0;\n\n  if (!sameYearMessages || !sameYearNow) {\n    text = (\n      <FormattedDate\n        day=\"numeric\"\n        month=\"long\"\n        value={toDate.toDate()}\n        year=\"numeric\"\n      />\n    );\n  }\n  // from.day < to.day assume from.day < now.day. must check to.day == now.day\n  else if (now.diff(toDate, 'days') === 0) {\n    text = (\n      <FormattedMessage\n        defaultMessage=\"Today\"\n        description=\"Day indicator for the current day\"\n        id=\"today\"\n      />\n    );\n  }\n  // from.day < to.day < now.day therefore from cannot be yesterday\n  // only need to check to.day == now.day - 1\n  else if (moment(now).subtract(1, 'days').diff(toDate, 'days') === 0) {\n    text = (\n      <FormattedMessage\n        defaultMessage=\"Yesterday\"\n        description=\"Day indicator for the previous day\"\n        id=\"yesterday\"\n      />\n    );\n  }\n  else {\n    // older than yesterday.\n    text = (\n      <FormattedDate\n        day=\"numeric\"\n        month=\"long\"\n        value={toDate.toDate()}\n      />\n    );\n  }\n\n  return text;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListSeparator from '@webex/react-component-list-separator';\n\nimport calculateDateText from './calculateDateText';\n\nconst propTypes = {\n  // All props are moment.js objects\n  fromDate: PropTypes.object.isRequired,\n  now: PropTypes.object.isRequired,\n  toDate: PropTypes.object.isRequired\n};\n\nfunction DaySeparator({\n  fromDate,\n  now,\n  toDate\n}) {\n  return (\n    <div>\n      <ListSeparator primaryText={calculateDateText(fromDate, now, toDate)} />\n    </div>\n  );\n}\n\nDaySeparator.propTypes = propTypes;\n\nexport default DaySeparator;\n"],"names":["calculateDateText","fromDate","now","toDate","text","sameYearMessages","diff","sameYearNow","moment","subtract","propTypes","PropTypes","object","isRequired","DaySeparator"],"mappings":";;;;;;AAOe,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,GAArC,EAA0CC,MAA1C,EAAkD;AAC/D,MAAIC,IAAJ,CAD+D;AAG/D;;AACA,QAAMC,gBAAgB,GAAGF,MAAM,CAACG,IAAP,CAAYL,QAAZ,EAAsB,OAAtB,MAAmC,CAA5D;AACA,QAAMM,WAAW,GAAGJ,MAAM,CAACG,IAAP,CAAYJ,GAAZ,EAAiB,OAAjB,MAA8B,CAAlD;;AAEA,MAAI,CAACG,gBAAD,IAAqB,CAACE,WAA1B,EAAuC;AACrCH,IAAAA,IAAI,gBACF,oBAAC,aAAD;AACE,MAAA,GAAG,EAAC,SADN;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,KAAK,EAAED,MAAM,CAACA,MAAP,EAHT;AAIE,MAAA,IAAI,EAAC;AAJP,MADF;AAQD,GATD;AAAA,OAWK,IAAID,GAAG,CAACI,IAAJ,CAASH,MAAT,EAAiB,MAAjB,MAA6B,CAAjC,EAAoC;AACvCC,MAAAA,IAAI,gBACF,oBAAC,gBAAD;AACE,QAAA,cAAc,EAAC,OADjB;AAEE,QAAA,WAAW,EAAC,mCAFd;AAGE,QAAA,EAAE,EAAC;AAHL,QADF;AAOD,KARI;AAUL;AAVK,SAWA,IAAII,MAAM,CAACN,GAAD,CAAN,CAAYO,QAAZ,CAAqB,CAArB,EAAwB,MAAxB,EAAgCH,IAAhC,CAAqCH,MAArC,EAA6C,MAA7C,MAAyD,CAA7D,EAAgE;AACnEC,QAAAA,IAAI,gBACF,oBAAC,gBAAD;AACE,UAAA,cAAc,EAAC,WADjB;AAEE,UAAA,WAAW,EAAC,oCAFd;AAGE,UAAA,EAAE,EAAC;AAHL,UADF;AAOD,OARI,MASA;AACH;AACAA,QAAAA,IAAI,gBACF,oBAAC,aAAD;AACE,UAAA,GAAG,EAAC,SADN;AAEE,UAAA,KAAK,EAAC,MAFR;AAGE,UAAA,KAAK,EAAED,MAAM,CAACA,MAAP;AAHT,UADF;AAOD;;AAED,SAAOC,IAAP;AACD;;ACnDD,MAAMM,SAAS,GAAG;AAChB;AACAT,EAAAA,QAAQ,EAAEU,SAAS,CAACC,MAAV,CAAiBC,UAFX;AAGhBX,EAAAA,GAAG,EAAES,SAAS,CAACC,MAAV,CAAiBC,UAHN;AAIhBV,EAAAA,MAAM,EAAEQ,SAAS,CAACC,MAAV,CAAiBC;AAJT,CAAlB;;AAOA,SAASC,YAAT,CAAsB;AACpBb,EAAAA,QADoB;AAEpBC,EAAAA,GAFoB;AAGpBC,EAAAA;AAHoB,CAAtB,EAIG;AACD,sBACE,8CACE,oBAAC,aAAD;AAAe,IAAA,WAAW,EAAEH,iBAAiB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,MAAhB;AAA7C,IADF,CADF;AAKD;;AAEDW,YAAY,CAACJ,SAAb,GAAyBA,SAAzB;;;;"}