import { Record, Map } from 'immutable';

const MeetingState = Record({
  joined: false,
  hasLocalMedia: false,
  hasRemoteVideo: false,
  hasRemoteAudio: false
});
const InitialState = Record({
  byDestination: Map(),
  byLocusUrl: Map(),
  byId: Map()
});
const initialState = new InitialState();
function buildDestinationLookup({
  destinationId,
  destinationType
}) {
  if (!destinationId || !destinationType) {
    throw new Error('#buildDestinationLookup - requires destinationID and destinationType');
  }

  return `${destinationType}-${destinationId}`;
}
function reducer(state = initialState, action) {
  switch (action.type) {
    // The source of truth for the meetings objects is the meetings collection
    // within the SDK. Instead of storing the meeting object in the redux store,
    // we will just be storing IDs and meeting state in order to do the collection lookup.
    case STORE_MEETING:
      {
        const {
          meeting,
          destinationId,
          destinationType
        } = action.payload;
        const {
          locusUrl,
          id
        } = meeting;
        const destination = buildDestinationLookup({
          destinationId,
          destinationType
        });
        let updatedState = state.setIn(['byId', id], new MeetingState()); // Store a link to the meeting's ID by destination

        updatedState = updatedState.setIn(['byDestination', destination], id); // Store a link to the meeting's ID by locus

        if (locusUrl) {
          updatedState = updatedState.setIn(['byLocusUrl', locusUrl], id);
        }

        return updatedState;
      }
    // Update the meeting state to show it has been joined

    case JOIN_MEETING:
      {
        const {
          meeting
        } = action.payload;
        return state.setIn(['byId', meeting.id, 'joined'], true);
      }
    // Update the meeting state to show it was left and not joined

    case LEAVE_MEETING:
      {
        const {
          meeting
        } = action.payload;
        return state.setIn(['byId', meeting.id, 'joined'], false);
      }
    // Update the meeting state

    case UPDATE_MEETING_STATE:
      {
        const {
          meeting,
          meetingState
        } = action.payload;
        return state.mergeIn(['byId', meeting.id], meetingState);
      }

    default:
      return state;
  }
}

const JOIN_MEETING = 'meetings/JOIN_MEETING';
const LEAVE_MEETING = 'meetings/LEAVE_MEETING';
const STORE_MEETING = 'meetings/STORE_MEETING';
const UPDATE_MEETING_STATE = 'meetings/UPDATE_MEETING_STATE'; // Redux Actions

function joinMeeting(meeting) {
  return {
    type: JOIN_MEETING,
    payload: {
      meeting
    }
  };
}

function leaveMeetingAction(meeting) {
  return {
    type: LEAVE_MEETING,
    payload: {
      meeting
    }
  };
}

function storeMeeting({
  destinationType,
  destinationId,
  meeting
}) {
  return {
    type: STORE_MEETING,
    payload: {
      destinationType,
      destinationId,
      meeting
    }
  };
}

function updateMeetingState(meeting, meetingState) {
  return {
    type: UPDATE_MEETING_STATE,
    payload: {
      meeting,
      meetingState
    }
  };
} // Helper Methods


function bindMeetingEvents(meeting, dispatch) {
  // Handle media streams changes to ready state
  meeting.on('media:ready', media => {
    if (!media) {
      return;
    }

    if (media.type === 'local') {
      dispatch(updateMeetingState(meeting, {
        hasLocalMedia: true
      }));
    }

    if (media.type === 'remoteVideo') {
      dispatch(updateMeetingState(meeting, {
        hasRemoteVideo: true
      }));
    }

    if (media.type === 'remoteAudio') {
      dispatch(updateMeetingState(meeting, {
        hasRemoteAudio: true
      }));
    }
  });
  /* eslint-disable no-warning-comments */
  // TODO: Add media:stopped handlers
  // TODO: Add meeting stopped & destroyed handlers

  /* eslint-enable no-warning-comments */
}
/**
 * Gets the meeting instance from the SDK plugin
 *
 * @param {Object} config
 * @param {String} config.destinationId
 * @param {String} config.destinationType
 * @param {String} config.meetingId
 * @param {Object} config.meetings Redux state object from the store
 * @param {Object} sdkInstance
 * @returns {Object} meeting instance
 */


function getMeetingFromSDK({
  destinationId,
  destinationType,
  meetingId,
  meetings
}, sdkInstance) {
  let calculatedMeetingId = meetingId;

  if (!meetingId) {
    if (!destinationId || !destinationType || !meetings) {
      throw new Error('#getMeetingFromSDK - unable to lookup meeting');
    }

    const destination = buildDestinationLookup({
      destinationId,
      destinationType
    });
    calculatedMeetingId = meetings.getIn(['byDestination', destination]);
  }

  const meeting = sdkInstance.meetings.meetingCollection.meetings[calculatedMeetingId];

  if (!meeting) {
    throw new Error('#getMeetingFromSDK - unable to locate meeting with id: ', calculatedMeetingId);
  }

  return meeting;
} // Exported Action Creators (Should return thunks)

/**
 * Creates a meeting and joins it via the SDK
 *
 * @param {Object} config
 * @param {String} config.destinationId
 * @param {String} config.destinationType
 * @param {Object} sdkInstance
 * @returns {Thunk}
 */


function createAndJoinMeeting({
  destinationType,
  destinationId
}, sdkInstance) {
  return dispatch => sdkInstance.meetings.create(destinationId).then(meeting => {
    dispatch(storeMeeting({
      destinationId,
      destinationType,
      meeting
    }));
    bindMeetingEvents(meeting, dispatch);
    return meeting.join().then(() => {
      dispatch(joinMeeting(meeting));
      return meeting;
    });
  });
}
/**
 * Gets local media and adds it to the meeting
 *
 * @param {Object} config
 * @param {String} config.meetingId
 * @param {boolean} config.receiveVideo
 * @param {boolean} config.receiveAudio
 * @param {boolean} config.receiveShare
 * @param {boolean} config.sendAudio
 * @param {boolean} config.sendVideo
 * @param {boolean} config.sendShare
 * @param {Object} sdkInstance
 * @returns {Thunk}
 */

function addMediaToMeeting({
  meetingId,
  receiveVideo,
  receiveAudio,
  receiveShare,
  sendVideo,
  sendAudio,
  sendShare
}, sdkInstance) {
  return () => {
    // Get meeting instance from the SDK
    const meeting = getMeetingFromSDK({
      meetingId
    }, sdkInstance);
    const mediaSettings = {
      receiveVideo,
      receiveAudio,
      receiveShare,
      sendVideo,
      sendAudio,
      sendShare
    }; // Get our local media stream and add it to the meeting

    return meeting.getMediaStreams(mediaSettings).then(mediaStreams => {
      const [localStream, localShare] = mediaStreams;
      meeting.addMedia({
        localShare,
        localStream,
        mediaSettings
      });
    });
  };
}
/**
 * Leaves a meeting via the SDK
 *
 * @param {Object} config
 * @param {String} config.destinationId
 * @param {String} config.destinationType
 * @param {Object} sdkInstance
 * @returns {Thunk}
  */

function leaveMeeting({
  destinationType,
  destinationId
}, sdkInstance) {
  return (dispatch, getState) => {
    const {
      meetings
    } = getState(); // Get meeting instance from the SDK

    const meeting = getMeetingFromSDK({
      destinationId,
      destinationType,
      meetings
    }, sdkInstance);
    return meeting.leave().then(() => {
      dispatch(leaveMeetingAction(meeting));
      return meeting;
    });
  };
}

export default reducer;
export { JOIN_MEETING, LEAVE_MEETING, STORE_MEETING, UPDATE_MEETING_STATE, addMediaToMeeting, buildDestinationLookup, createAndJoinMeeting, initialState, leaveMeeting };
//# sourceMappingURL=index.js.map
