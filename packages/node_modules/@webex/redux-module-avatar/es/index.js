import { bufferToBlob } from '@webex/react-component-utils';
import { fromJS } from 'immutable';

const ADD_AVATAR = 'avatar/ADD_AVATAR';
const ADD_AVATAR_BEGIN = 'avatar/ADD_AVATAR_BEGIN';
function addAvatar(id, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      id,
      avatar
    }
  };
}

function addAvatarBegin(id) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      id
    }
  };
}
/**
 * A bit of a hack to get smaller Avatars from Public API
 */


function convertToSmallAvatar(avatarUrl) {
  const sizeRegEx = /~\d+$/;

  if (sizeRegEx.test(avatarUrl)) {
    return avatarUrl.replace(sizeRegEx, '~110');
  }

  return avatarUrl;
}

function fetchUserAvatar(userId, spark) {
  return dispatch => {
    dispatch(addAvatarBegin(userId));
    return spark.people.get(userId).then(person => {
      const avatar = convertToSmallAvatar(person.avatar);
      dispatch(addAvatar(userId, avatar));
      return Promise.resolve(avatar);
    }).catch(() => {
      dispatch(addAvatar(userId, ''));
      return Promise.resolve({
        id: userId
      });
    });
  };
}

function fetchSpaceAvatar(space, sparkInstance, userIdForAvatar) {
  return dispatch => {
    if (space.type === 'direct' && space.participants.length === 2) {
      if (!userIdForAvatar) {
        return Promise.reject(new Error('Direct spaces require a user id to display'));
      }

      return dispatch(fetchUserAvatar(userIdForAvatar, sparkInstance));
    }

    if (space.avatar) {
      dispatch(addAvatarBegin(space.id));
      return sparkInstance.internal.conversation.download(space.avatar.files.items[0]).then(file => {
        const {
          objectUrl
        } = bufferToBlob(file);
        dispatch(addAvatar(space.id, objectUrl));
        return Promise.resolve({
          id: space.id
        });
      });
    }

    dispatch(addAvatar(space.id, ''));
    return Promise.resolve({
      id: space.id
    });
  };
}
/**
 * Fetches an avatar for a given space or user id
 * @param {Object} params
 * @param {Object} params.space
 * @param {String} params.userId
 * @param {Object} spark
 * @returns {Thunk}
 */


function fetchAvatar({
  space,
  userId
}, spark) {
  return (dispatch, getState) => {
    const {
      avatar
    } = getState();
    const avatarId = space ? space.id : userId;
    const hasFetched = avatar.hasIn(['items', avatarId]);
    const isFetching = avatar.hasIn(['avatarsInFlight', avatarId]);

    if (hasFetched) {
      return Promise.resolve(avatar.getIn(['items', avatarId]));
    }

    if (isFetching) {
      return Promise.resolve();
    }

    if (space) {
      return dispatch(fetchSpaceAvatar(space, spark, userId));
    }

    return dispatch(fetchUserAvatar(userId, spark));
  };
}
/**
 * Fetches a group of users' avatars
 * @param {Array} userIds
 * @param {object} spark
 * @returns {Thunk}
 */

function fetchAvatarsForUsers(userIds, spark) {
  return dispatch => Promise.all(userIds.map(userId => dispatch(fetchAvatar({
    userId
  }, spark))));
}

const initialState = fromJS({
  items: {},
  avatarsInFlight: {}
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case ADD_AVATAR:
      {
        const {
          id,
          avatar
        } = action.payload;
        return state.setIn(['items', id], avatar).deleteIn(['avatarsInFlight', id]);
      }

    case ADD_AVATAR_BEGIN:
      return state.setIn(['avatarsInFlight', action.payload.id], true);

    default:
      return state;
  }
}

export default reducer;
export { ADD_AVATAR, ADD_AVATAR_BEGIN, addAvatar, convertToSmallAvatar, fetchAvatar, fetchAvatarsForUsers, initialState };
//# sourceMappingURL=index.js.map
