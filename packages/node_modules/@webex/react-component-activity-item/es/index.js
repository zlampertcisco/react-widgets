import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import ActivityPost from '@webex/react-component-activity-post';
import ActivityShareFiles from '@webex/react-component-activity-share-files';
import ActivitySystemMessage, { SYSTEM_MESSAGE_VERBS } from '@webex/react-component-activity-system-message';
import { ACTIVITY_CARDS, hasAdaptiveCard, FEATURES_WIDGET_ADAPTIVE_CARD_ON } from '@webex/react-component-utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-component-activity-item__activityItemContainer__LmFjdGl2 {\n  position: relative;\n  display: flex;\n  min-width: 300px;\n  padding: 5px 20px 0 0;\n  margin: 0 14px 0 16px;\n  overflow: initial;\n  outline: none;\n  transition: transform 0.3s;\n}\n\n.react-component-activity-item__activityReplyItemContainer__LmFjdGl2 {\n  position: relative;\n  display: flex;\n  min-width: 300px;\n  padding: 5px 20px 0 0;\n  margin: 0 14px 0 76px;\n  padding-left: 12px;\n  border-left: 4px solid rgba(0, 0, 0, .12);\n  overflow: initial;\n  outline: none;\n  transition: transform 0.3s;\n}\n\n.react-component-activity-item__activityItemContainer__LmFjdGl2.react-component-activity-item__additional__LmFjdGl2 {\n  padding-top: 0;\n}\n";
var styles = {"activityItemContainer":"react-component-activity-item__activityItemContainer__LmFjdGl2","activityReplyItemContainer":"react-component-activity-item__activityReplyItemContainer__LmFjdGl2","additional":"react-component-activity-item__additional__LmFjdGl2"};
styleInject(css_248z);

const POST_VERB = 'post';
const SHARE_VERB = 'share';
const LINKS_CONTENT_CATEGORY = 'links';
const propTypes = {
  actor: PropTypes.shape({
    displayName: PropTypes.displayName
  }).isRequired,
  activity: PropTypes.shape({
    cards: PropTypes.array,
    component: PropTypes.element,
    contentCategory: PropTypes.string,
    content: PropTypes.string,
    displayName: PropTypes.string,
    files: PropTypes.shape({
      items: PropTypes.arrayOf(PropTypes.shape({
        image: PropTypes.shape({
          url: PropTypes.string
        }),
        thumbnail: PropTypes.string,
        mimeType: PropTypes.string,
        url: PropTypes.string
      }))
    })
  }).isRequired,
  timestamp: PropTypes.string.isRequired,
  isAdditional: PropTypes.bool,
  isReply: PropTypes.bool,
  verb: PropTypes.string.isRequired,
  adaptiveCardFeatureState: PropTypes.string.isRequired,
  sdkInstance: PropTypes.object.isRequired,
  id: PropTypes.string.isRequired,
  intl: PropTypes.object.isRequired
};
const defaultProps = {
  isAdditional: false,
  isReply: false
};
/**
 * It will store the links and the names of the file and display them
 * as link components separated by commas
 * @param {Object} props
 * @returns {Object} Activity post Item
 */

function createECMItemComponents(props) {
  const links = [];
  /* eslint-disable react/prop-types */

  const {
    activity
  } = props;
  let content = 'This ECM file is not supported';

  if (activity.links && activity.links.items) {
    for (const item of activity.links.items) {
      links.push(`<a href="${item.sslr.loc}">${item.displayName}</a>`);
    }

    content = activity.displayName ? `${links.join('\n')} \n ${activity.displayName}` : `${links.join('\n')}`;
  }

  return /*#__PURE__*/React.createElement(ActivityPost, _extends({
    content: content,
    displayName: activity.displayName,
    renderedComponent: activity.component
  }, props));
  /* eslint-enable react/prop-types */
}

function ActivityItem(props) {
  const {
    activity,
    isAdditional,
    isReply,
    verb,
    adaptiveCardFeatureState,
    sdkInstance,
    id,
    intl
  } = props;
  let itemComponent = '';
  let shouldRenderAdaptiveCard = false;

  if (Object.prototype.hasOwnProperty.call(activity, ACTIVITY_CARDS)) {
    shouldRenderAdaptiveCard = hasAdaptiveCard(activity.cards, sdkInstance);
  }

  if (verb === POST_VERB) {
    itemComponent = /*#__PURE__*/React.createElement(ActivityPost, _extends({
      renderAdaptiveCard: shouldRenderAdaptiveCard && adaptiveCardFeatureState === FEATURES_WIDGET_ADAPTIVE_CARD_ON,
      cards: activity.cards,
      content: activity.content,
      displayName: activity.displayName,
      renderedComponent: activity.component,
      activityId: id,
      intl: intl
    }, props));
  } else if (verb === SHARE_VERB) {
    if (activity.contentCategory === LINKS_CONTENT_CATEGORY) {
      // ECM files will be displayed as links for now
      itemComponent = createECMItemComponents(props);
    } else {
      itemComponent = /*#__PURE__*/React.createElement(ActivityShareFiles, _extends({
        renderAdaptiveCard: shouldRenderAdaptiveCard && adaptiveCardFeatureState === FEATURES_WIDGET_ADAPTIVE_CARD_ON,
        cards: activity.cards,
        activityId: id,
        content: activity.content,
        displayName: activity.displayName,
        files: activity.files.items,
        intl: intl
      }, props));
    }
  } else if (SYSTEM_MESSAGE_VERBS.indexOf(verb) !== -1) {
    itemComponent = /*#__PURE__*/React.createElement(ActivitySystemMessage, props);
  }

  const style = isReply ? styles.activityReplyItemContainer : styles.activityItemContainer;
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-activity-item-container', style, isAdditional ? styles.additional : '')
  }, itemComponent);
}

ActivityItem.propTypes = propTypes;
ActivityItem.defaultProps = defaultProps;

export default ActivityItem;
//# sourceMappingURL=index.js.map
