import { fromJS } from 'immutable';

const ADD_FLAG = 'flags/ADD_FLAG';
const STORE_FLAGS = 'flags/STORE_FLAGS';
const REMOVE_FLAG = 'flags/REMOVE_FLAG';
const UPDATE_FLAG_STATUS = 'flags/UPDATE_FLAG_STATUS';

function updateFlagStatus(status) {
  return {
    type: UPDATE_FLAG_STATUS,
    payload: {
      status
    }
  };
}

function addFlag(flag, error) {
  return {
    type: ADD_FLAG,
    payload: {
      flag,
      error
    }
  };
}

function storeFlags(flags, error) {
  return {
    type: STORE_FLAGS,
    payload: {
      flags,
      error
    }
  };
}

function removeFlag(flag, error) {
  return {
    type: REMOVE_FLAG,
    payload: {
      error,
      flag
    }
  };
}

function constructFlag(flag) {
  return {
    id: flag.id,
    url: flag.url,
    activityUrl: flag['flag-item'],
    isInFlight: false
  };
}
/**
 * Fetches all of the current user's flags
 *
 * @param {any} sparkInstance
 * @returns {function}
 */


function fetchFlags(sparkInstance) {
  return dispatch => {
    var _sparkInstance$intern, _sparkInstance$intern2;

    dispatch(updateFlagStatus({
      isFetching: true
    }));
    return (_sparkInstance$intern = sparkInstance.internal) === null || _sparkInstance$intern === void 0 ? void 0 : (_sparkInstance$intern2 = _sparkInstance$intern.flag) === null || _sparkInstance$intern2 === void 0 ? void 0 : _sparkInstance$intern2.list().then(flags => {
      let flagsMap = flags.map(constructFlag);
      flagsMap = flagsMap.reduce((acc, val) => {
        acc[val.activityUrl] = val;
        return acc;
      }, {});
      return dispatch(storeFlags(flagsMap));
    }).catch(error => sparkInstance.logger.warn(error));
  };
}
/**
 * Flags a given activity. Updates state immediately then
 * adds flag details given from api
 *
 * @param {any} activity
 * @param {any} spark
 * @returns {function}
 */

function flagActivity(activity, spark) {
  return dispatch => {
    const flagObject = {
      activityUrl: activity.url,
      isInFlight: true
    };
    dispatch(addFlag(flagObject));
    return spark.internal.flag.create(activity).then(flag => dispatch(addFlag(constructFlag(flag)))).catch(error => spark.logger.warn(error));
  };
}
/**
 * Removes a flag from the server. Updates the state immediately
 * but re-adds it if the delete fails
 *
 * @param {any} flag
 * @param {any} spark
 * @returns {function}
 */

function removeFlagFromServer(flag, spark) {
  return dispatch => {
    dispatch(removeFlag(flag));
    return spark.internal.flag.delete(flag.toJS()).catch(error => {
      spark.logger.warn(error);
    });
  };
}

const initialState = fromJS({
  flags: {},
  error: null,
  status: {
    hasFetched: false,
    isFetching: false
  }
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case ADD_FLAG:
      {
        const {
          flag,
          error
        } = action.payload;

        if (error) {
          return state.setIn(['flags', flag.activityUrl], {
            error
          });
        }

        return state.setIn(['flags', flag.activityUrl], fromJS(flag));
      }

    case STORE_FLAGS:
      {
        const {
          flags,
          error
        } = action.payload;

        if (error) {
          return state.setIn(['status', 'hasFetched'], true).setIn(['status', 'isFetching'], false).set('error', error);
        }

        return state.setIn(['status', 'hasFetched'], true).setIn(['status', 'isFetching'], false).mergeDeepIn(['flags'], flags);
      }

    case REMOVE_FLAG:
      {
        const {
          flag
        } = action.payload;

        if (action.error) {
          // Unable to delete flag, add it back in
          return state.setIn(['flags', flag.activityUrl], fromJS(flag));
        }

        return state.deleteIn(['flags', flag.get('activityUrl')]);
      }

    case UPDATE_FLAG_STATUS:
      {
        return state.mergeDeepIn(['status'], action.payload.status);
      }

    default:
      {
        return state;
      }
  }
}

export default reducer;
export { ADD_FLAG, REMOVE_FLAG, STORE_FLAGS, UPDATE_FLAG_STATUS, fetchFlags, flagActivity, initialState, removeFlagFromServer };
//# sourceMappingURL=index.js.map
