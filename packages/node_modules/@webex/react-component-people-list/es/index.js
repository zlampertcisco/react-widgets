import 'react-virtualized/styles.css';
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { AutoSizer, List } from 'react-virtualized';
import { Button, ListItem, ListItemSection, Popover, Icon, ListItemHeader } from '@momentum-ui/react';
import PresenceAvatar from '@webex/react-container-presence-avatar';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z$1 = ".react-component-people-list__item__Lml0ZW0g {\n  display: flex;\n  height: 44px;\n  font-size: 14px;\n  font-weight: 300;\n  align-items: center;\n  color: #4f5051;\n  cursor: pointer;\n}\n\n.react-component-people-list__name__Lml0ZW0g {\n  flex: 1 1 auto;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.react-component-people-list__avatar__Lml0ZW0g {\n  flex: 0 0 auto;\n  width: 32px;\n  height: 32px;\n  margin-right: 12px;\n}\n\n.react-component-people-list__external__Lml0ZW0g {\n  color: #FFB400;\n}\n\n.react-component-people-list__pending__Lml0ZW0g {\n  opacity: 0.3;\n}\n\n.react-component-people-list__popover__Lml0ZW0g {\n  padding: 5px;\n  color: #000;\n}\n\n.react-component-people-list__popover__Lml0ZW0g button {\n  font-size: 10px !important;\n}\n\n.react-component-people-list__moreButton__Lml0ZW0g {\n  display: none;\n}\n\n.react-component-people-list__item__Lml0ZW0g:hover .react-component-people-list__moreButton__Lml0ZW0g{\n  display: block;\n}\n";
var styles$1 = {"item":"react-component-people-list__item__Lml0ZW0g","name":"react-component-people-list__name__Lml0ZW0g","avatar":"react-component-people-list__avatar__Lml0ZW0g","external":"react-component-people-list__external__Lml0ZW0g","pending":"react-component-people-list__pending__Lml0ZW0g","popover":"react-component-people-list__popover__Lml0ZW0g","moreButton":"react-component-people-list__moreButton__Lml0ZW0g"};
styleInject(css_248z$1);

const propTypes$1 = {
  canEdit: PropTypes.bool,
  displayName: PropTypes.string,
  emailAddress: PropTypes.string,
  id: PropTypes.string,
  isExternal: PropTypes.bool,
  isPending: PropTypes.bool,
  onClick: PropTypes.func,
  onRemove: PropTypes.func
};
const defaultProps$1 = {
  canEdit: false,
  emailAddress: '',
  id: '',
  displayName: '',
  isExternal: false,
  isPending: false,
  onClick: () => {},
  onRemove: () => {}
};

function Person({
  canEdit,
  displayName,
  emailAddress,
  id,
  isExternal,
  isPending,
  onClick,
  onRemove
}) {
  function handleAction() {
    if (!isPending) {
      onClick();
    }
  }

  function handleRemove() {
    if (!isPending) {
      onRemove();
    }
  }

  const detailName = emailAddress.length ? `${displayName} (${emailAddress})` : `${displayName}`;
  const popoverContent = /*#__PURE__*/React.createElement("span", {
    className: classNames('webex-people-list-item-popover', styles$1.popover)
  }, /*#__PURE__*/React.createElement(Button, {
    ariaLabel: "Remove from space",
    onClick: handleRemove,
    removeStyle: true
  }, "Remove from space"));
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-people-list-item', styles$1.item, {
      [styles$1.external]: isExternal,
      'webex-people-list-item-external': isExternal,
      [styles$1.pending]: isPending,
      'webex-people-list-item-pending': isPending
    }),
    title: detailName
  }, /*#__PURE__*/React.createElement(ListItem, {
    onClick: handleAction,
    title: displayName,
    type: "small"
  }, /*#__PURE__*/React.createElement(ListItemSection, {
    position: "left"
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-people-list-avatar', styles$1.avatar)
  }, /*#__PURE__*/React.createElement(PresenceAvatar, {
    avatarId: id,
    name: displayName,
    size: 28
  }))), /*#__PURE__*/React.createElement(ListItemSection, {
    position: "center"
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-people-list-name', styles$1.name)
  }, displayName)), /*#__PURE__*/React.createElement(ListItemSection, {
    position: "right"
  }, canEdit && /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-people-list-more', styles$1.moreButton)
  }, /*#__PURE__*/React.createElement(Popover, {
    closeOnClick: true,
    content: popoverContent,
    delay: 0,
    direction: "bottom-right",
    doesAnchorToggle: true,
    hideDelay: 0,
    hoverDelay: 500,
    isContained: true,
    popoverTrigger: "Click"
  }, /*#__PURE__*/React.createElement(Button, {
    ariaLabel: "More Details",
    circle: true
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "icon-more_20"
  })))))));
}

Person.propTypes = propTypes$1;
Person.defaultProps = defaultProps$1;

var css_248z = ".react-component-people-list__group__Lmdyb3Vw {\n  padding-bottom: 6px;\n}\n\n.react-component-people-list__title__Lmdyb3Vw {\n  padding: 8px 16px;\n  margin: 0 0 2px 0;\n  font-size: 12px;\n  font-weight: 300;\n  color: #4f5051;\n  border-bottom: 1px #d2d3d4 solid;\n}\n\n.react-component-people-list__list__Lmdyb3Vw {\n  flex: 1 1 auto;\n  height: 100%;\n}\n\n.react-component-people-list__listNonVirtualized__Lmdyb3Vw {\n  overflow-y: auto;\n}\n";
var styles = {"group":"react-component-people-list__group__Lmdyb3Vw","title":"react-component-people-list__title__Lmdyb3Vw","list":"react-component-people-list__list__Lmdyb3Vw","listNonVirtualized":"react-component-people-list__listNonVirtualized__Lmdyb3Vw"};
styleInject(css_248z);

const propTypes = {
  canEdit: PropTypes.bool,
  items: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    people: PropTypes.arrayOf(PropTypes.shape({
      displayName: PropTypes.string,
      emailAddress: PropTypes.string,
      id: PropTypes.string,
      isExternal: PropTypes.bool,
      isPending: PropTypes.bool
    }))
  })).isRequired,
  onItemClick: PropTypes.func,
  onPersonRemove: PropTypes.func,
  onDisplayUsers: PropTypes.func
};
const defaultProps = {
  canEdit: false,
  onItemClick: () => {},
  onDisplayUsers: () => {},
  onPersonRemove: () => {}
};

function PeopleList({
  canEdit,
  items,
  onItemClick,
  onDisplayUsers,
  onPersonRemove
}) {
  if (!items || !items.length) {
    return null;
  }

  const totalRows = [];
  items.forEach(item => {
    // Header for item
    if (item.label) {
      totalRows.push({
        type: 'header',
        details: item.label
      });
    } // Rows for each person


    item.people.forEach(person => {
      totalRows.push({
        type: 'person',
        details: person
      });
    });
  }); // disable react/prop-types because eslint thinks rowRenderer is the main render

  /* eslint-disable react/prop-types */

  function rowRenderer({
    key,
    index,
    style,
    showEdit = false
  }) {
    /* eslint-enable react/prop-types */
    if (totalRows[index].type === 'header') {
      return /*#__PURE__*/React.createElement("div", {
        style: style,
        className: classNames('webex-people-group', styles.group),
        key: totalRows[index].details
      }, totalRows[index].details && /*#__PURE__*/React.createElement(ListItemHeader, {
        className: classNames('webex-people-group-title', styles.title),
        header: totalRows[index].details,
        isReadOnly: true
      }));
    }

    const person = totalRows[index].details;

    const handleItemClick = () => {
      onItemClick(person);
    };

    const handlePersonRemove = () => {
      onPersonRemove(person);
    };

    return /*#__PURE__*/React.createElement("div", {
      key: key,
      style: style
    }, /*#__PURE__*/React.createElement(Person, {
      canEdit: showEdit,
      displayName: person.displayName || person.name,
      key: person.id,
      onClick: handleItemClick,
      onRemove: handlePersonRemove,
      emailAddress: person.emailAddress,
      id: person.id,
      isExternal: person.isExternal,
      isPending: person.isPending
    }));
  }

  function onRowsRendered({
    startIndex,
    stopIndex
  }) {
    // gets users from displayed rows that are not labels
    const userIds = totalRows.slice(startIndex, stopIndex + 1).filter(row => row.type === 'person').map(p => p.details.id);
    onDisplayUsers(userIds);
  }

  const canNotVirtualize = canEdit && totalRows.length < 50; // To display the popover for moderator functions, we cannot use virtualized

  const list = canNotVirtualize ? totalRows.map((row, index) => {
    const key = totalRows[index].type === 'header' ? totalRows[index].details : totalRows[index].details.id;
    return rowRenderer({
      index,
      key,
      showEdit: true
    });
  }) : /*#__PURE__*/React.createElement(AutoSizer, null, ({
    height,
    width
  }) => /*#__PURE__*/React.createElement(List, {
    height: height,
    rowCount: totalRows.length,
    rowHeight: 44,
    rowRenderer: rowRenderer,
    width: width,
    onRowsRendered: onRowsRendered
  }));
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('webex-people-list', styles.list, {
      [styles.listNonVirtualized]: canNotVirtualize
    })
  }, list);
}

PeopleList.propTypes = propTypes;
PeopleList.defaultProps = defaultProps;

export default PeopleList;
//# sourceMappingURL=index.js.map
