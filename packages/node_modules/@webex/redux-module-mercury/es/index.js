import { fromJS } from 'immutable';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { compose, lifecycle } from 'recompose';
import { setWrappedDisplayName } from '@webex/react-component-utils';

const SET_CONNECTING = 'mercury/SET_CONNECTING';
const SET_CONNECTED = 'mercury/SET_CONNECTED';

function updateStatusConnecting(value) {
  return {
    type: SET_CONNECTING,
    payload: value
  };
}

function updateStatusConnected(value) {
  return {
    type: SET_CONNECTED,
    payload: value
  };
}

function connectToMercury(sparkInstance) {
  return dispatch => {
    if (sparkInstance) {
      const {
        canAuthorize,
        internal
      } = sparkInstance;
      const {
        device,
        mercury
      } = internal;

      if (canAuthorize && device.registered && !mercury.connected && !mercury.connecting) {
        dispatch(updateStatusConnecting(true));
        return mercury.connect().then(() => sparkInstance.listenToAndRun(mercury, 'change:connected', () => dispatch(updateStatusConnected(mercury.connected))));
      } // Handle if mercury is already connected from previous instance


      if (mercury.connected) {
        return dispatch(updateStatusConnected(mercury.connected));
      }
    }

    return Promise.resolve();
  };
}

const initialState = fromJS({
  status: {
    connected: false,
    connecting: false,
    hasConnected: false
  }
});
function reducer(state = initialState, action) {
  switch (action.type) {
    case SET_CONNECTING:
      {
        return state.setIn(['status', 'connecting'], action.payload);
      }

    case SET_CONNECTED:
      {
        let hasConnected = state.getIn(['status', 'hasConnected']);

        if (action.payload) {
          hasConnected = true;
        }

        return state.setIn(['status', 'connected'], action.payload).setIn(['status', 'hasConnected'], hasConnected);
      }

    default:
      {
        return state;
      }
  }
}

function setupMercury(props) {
  const {
    mercury,
    sparkInstance,
    sparkState
  } = props;

  if (sparkInstance && sparkState.get('authenticated') && sparkState.get('registered') && !sparkState.get('hasError') && !mercury.getIn(['status', 'hasConnected']) && !mercury.getIn(['status', 'isConnecting']) && !mercury.getIn(['status', 'isConnected']) && sparkInstance.internal.device.registered) {
    props.connectToMercury(sparkInstance);
  }
}

var enhancer = compose(setWrappedDisplayName('WithMercury'), connect(state => state, dispatch => bindActionCreators({
  connectToMercury
}, dispatch)), lifecycle({
  componentWillReceiveProps(nextProps) {
    setupMercury(nextProps);
  }

}));

export default reducer;
export { SET_CONNECTED, SET_CONNECTING, connectToMercury, enhancer };
//# sourceMappingURL=index.js.map
